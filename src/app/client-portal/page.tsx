'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { Button } from '@/components/ui/Button'\nimport { StatusBadge } from '@/components/ui/StatusBadge'\nimport { ReceiptUpload } from '@/components/client-portal/SimpleReceiptUpload'\nimport { logger } from '@/lib/logger'\n\ninterface ClientPortalData {\n  client: {\n    id: string\n    name: string\n    email: string\n    accountant: {\n      name: string\n      email: string\n      phone?: string\n    }\n  }\n  recentReports: Array<{\n    id: string\n    title: string\n    period: string\n    generatedAt: string\n    status: 'draft' | 'final' | 'sent'\n    downloadUrl?: string\n  }>\n  pendingReceipts: Array<{\n    id: string\n    description: string\n    amount: number\n    date: string\n    daysOverdue: number\n  }>\n  recentActivity: Array<{\n    id: string\n    type: 'receipt_uploaded' | 'report_generated' | 'message_received' | 'reminder_sent'\n    description: string\n    timestamp: string\n  }>\n  stats: {\n    receiptsThisMonth: number\n    receiptsProcessed: number\n    pendingReceipts: number\n    lastReportDate: string\n  }\n}\n\nexport default function ClientPortalPage() {\n  const [portalData, setPortalData] = useState<ClientPortalData | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [activeTab, setActiveTab] = useState<'dashboard' | 'receipts' | 'reports' | 'messages'>('dashboard')\n  const [error, setError] = useState<string | null>(null)\n  const router = useRouter()\n\n  useEffect(() => {\n    loadPortalData()\n  }, [])\n\n  const loadPortalData = async () => {\n    try {\n      setLoading(true)\n      setError(null)\n      \n      // In a real implementation, this would get client ID from authentication\n      const clientId = 'demo-client-id'\n      \n      const response = await fetch(`/api/client-portal/dashboard?clientId=${clientId}`)\n      \n      if (!response.ok) {\n        throw new Error('Failed to load portal data')\n      }\n      \n      const data = await response.json()\n      setPortalData(data)\n      \n    } catch (error) {\n      logger.error('Error loading portal data', error as Error)\n      setError('Failed to load portal data. Please try again.')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleReceiptUpload = (receipt: any) => {\n    // Refresh portal data after successful upload\n    loadPortalData()\n  }\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading your portal...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (error || !portalData) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-red-500 mb-4\">\n            <svg className=\"w-16 h-16 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n          </div>\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Unable to Load Portal</h2>\n          <p className=\"text-gray-600 mb-4\">{error}</p>\n          <Button onClick={loadPortalData} variant=\"primary\">\n            Try Again\n          </Button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <h1 className=\"text-2xl font-bold text-gray-900\">BooksFlowAI</h1>\n              <span className=\"ml-3 text-sm text-gray-500\">Client Portal</span>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <div className=\"text-right\">\n                <p className=\"text-sm font-medium text-gray-900\">{portalData.client.name}</p>\n                <p className=\"text-xs text-gray-500\">{portalData.client.email}</p>\n              </div>\n              \n              <Button\n                onClick={() => {\n                  // Handle logout\n                  router.push('/auth/login')\n                }}\n                variant=\"ghost\"\n                size=\"sm\"\n              >\n                Sign Out\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Navigation Tabs */}\n      <nav className=\"bg-white border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex space-x-8\">\n            {[\n              { id: 'dashboard', label: 'Dashboard', icon: 'üìä' },\n              { id: 'receipts', label: 'Upload Receipts', icon: 'üìÑ' },\n              { id: 'reports', label: 'Reports', icon: 'üìà' },\n              { id: 'messages', label: 'Messages', icon: 'üí¨' }\n            ].map((tab) => (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id as any)}\n                className={`\n                  flex items-center space-x-2 py-4 px-1 border-b-2 font-medium text-sm\n                  ${\n                    activeTab === tab.id\n                      ? 'border-primary-500 text-primary-600'\n                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                  }\n                `}\n              >\n                <span>{tab.icon}</span>\n                <span>{tab.label}</span>\n              </button>\n            ))}\n          </div>\n        </div>\n      </nav>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {activeTab === 'dashboard' && (\n          <DashboardTab portalData={portalData} onRefresh={loadPortalData} />\n        )}\n        \n        {activeTab === 'receipts' && (\n          <ReceiptsTab \n            clientId={portalData.client.id}\n            accountantId={portalData.client.accountant.email} // Using email as ID for demo\n            onUploadComplete={handleReceiptUpload}\n          />\n        )}\n        \n        {activeTab === 'reports' && (\n          <ReportsTab reports={portalData.recentReports} />\n        )}\n        \n        {activeTab === 'messages' && (\n          <MessagesTab \n            clientId={portalData.client.id}\n            accountant={portalData.client.accountant}\n          />\n        )}\n      </main>\n    </div>\n  )\n}\n\n// Dashboard Tab Component\nfunction DashboardTab({ portalData, onRefresh }: { portalData: ClientPortalData; onRefresh: () => void }) {\n  return (\n    <div className=\"space-y-6\">\n      {/* Welcome Section */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">\n          Welcome back, {portalData.client.name.split(' ')[0]}!\n        </h2>\n        <p className=\"text-gray-600\">\n          Your accountant is {portalData.client.accountant.name}. \n          Here's what's happening with your bookkeeping.\n        </p>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                <span className=\"text-blue-600 text-sm\">üìÑ</span>\n              </div>\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-500\">This Month</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">{portalData.stats.receiptsThisMonth}</p>\n              <p className=\"text-xs text-gray-500\">receipts uploaded</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                <span className=\"text-green-600 text-sm\">‚úÖ</span>\n              </div>\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-500\">Processed</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">{portalData.stats.receiptsProcessed}</p>\n              <p className=\"text-xs text-gray-500\">receipts completed</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <div className=\"w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center\">\n                <span className=\"text-yellow-600 text-sm\">‚è≥</span>\n              </div>\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-500\">Pending</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">{portalData.stats.pendingReceipts}</p>\n              <p className=\"text-xs text-gray-500\">need attention</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <div className=\"w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center\">\n                <span className=\"text-purple-600 text-sm\">üìä</span>\n              </div>\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-500\">Last Report</p>\n              <p className=\"text-lg font-semibold text-gray-900\">\n                {new Date(portalData.stats.lastReportDate).toLocaleDateString()}\n              </p>\n              <p className=\"text-xs text-gray-500\">monthly summary</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Pending Receipts Alert */}\n      {portalData.pendingReceipts.length > 0 && (\n        <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-6\">\n          <div className=\"flex items-start\">\n            <div className=\"flex-shrink-0\">\n              <svg className=\"w-5 h-5 text-yellow-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n              </svg>\n            </div>\n            <div className=\"ml-3\">\n              <h3 className=\"text-sm font-medium text-yellow-800\">\n                Missing Receipts ({portalData.pendingReceipts.length})\n              </h3>\n              <div className=\"mt-2 text-sm text-yellow-700\">\n                <p>Your accountant is waiting for these receipts:</p>\n                <ul className=\"mt-2 space-y-1\">\n                  {portalData.pendingReceipts.slice(0, 3).map((receipt) => (\n                    <li key={receipt.id} className=\"flex justify-between\">\n                      <span>{receipt.description}</span>\n                      <span className=\"font-medium\">\n                        ${receipt.amount.toFixed(2)} ‚Ä¢ {receipt.daysOverdue} days overdue\n                      </span>\n                    </li>\n                  ))}\n                  {portalData.pendingReceipts.length > 3 && (\n                    <li className=\"text-yellow-600\">...and {portalData.pendingReceipts.length - 3} more</li>\n                  )}\n                </ul>\n              </div>\n              <div className=\"mt-4\">\n                <Button\n                  onClick={() => setActiveTab('receipts')}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"border-yellow-300 text-yellow-800 hover:bg-yellow-100\"\n                >\n                  Upload Missing Receipts\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Recent Activity */}\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h3 className=\"text-lg font-medium text-gray-900\">Recent Activity</h3>\n        </div>\n        <div className=\"divide-y divide-gray-200\">\n          {portalData.recentActivity.map((activity) => (\n            <div key={activity.id} className=\"px-6 py-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"flex-shrink-0\">\n                  {activity.type === 'receipt_uploaded' && (\n                    <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                      <span className=\"text-green-600 text-sm\">üìÑ</span>\n                    </div>\n                  )}\n                  {activity.type === 'report_generated' && (\n                    <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                      <span className=\"text-blue-600 text-sm\">üìä</span>\n                    </div>\n                  )}\n                  {activity.type === 'message_received' && (\n                    <div className=\"w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center\">\n                      <span className=\"text-purple-600 text-sm\">üí¨</span>\n                    </div>\n                  )}\n                  {activity.type === 'reminder_sent' && (\n                    <div className=\"w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center\">\n                      <span className=\"text-yellow-600 text-sm\">‚è∞</span>\n                    </div>\n                  )}\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm text-gray-900\">{activity.description}</p>\n                  <p className=\"text-xs text-gray-500\">\n                    {new Date(activity.timestamp).toLocaleString()}\n                  </p>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Receipts Tab Component\nfunction ReceiptsTab({ \n  clientId, \n  accountantId, \n  onUploadComplete \n}: { \n  clientId: string\n  accountantId: string\n  onUploadComplete: (receipt: any) => void \n}) {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Upload Receipts</h2>\n        <p className=\"text-gray-600 mb-6\">\n          Upload your business receipts here. Our AI will automatically extract the vendor, amount, and date, \n          then match them to your transactions.\n        </p>\n        \n        <ReceiptUpload\n          clientId={clientId}\n          accountantId={accountantId}\n          onUploadComplete={onUploadComplete}\n          maxFiles={10}\n        />\n      </div>\n    </div>\n  )\n}\n\n// Reports Tab Component\nfunction ReportsTab({ reports }: { reports: ClientPortalData['recentReports'] }) {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h2 className=\"text-xl font-semibold text-gray-900\">Your Reports</h2>\n          <p className=\"text-gray-600 mt-1\">\n            View and download your monthly financial reports\n          </p>\n        </div>\n        \n        <div className=\"divide-y divide-gray-200\">\n          {reports.map((report) => (\n            <div key={report.id} className=\"px-6 py-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <h3 className=\"text-lg font-medium text-gray-900\">{report.title}</h3>\n                  <p className=\"text-sm text-gray-500\">\n                    {report.period} ‚Ä¢ Generated {new Date(report.generatedAt).toLocaleDateString()}\n                  </p>\n                </div>\n                \n                <div className=\"flex items-center space-x-3\">\n                  <StatusBadge \n                    status={report.status === 'final' ? 'approved' : report.status === 'sent' ? 'synced' : 'pending'}\n                    size=\"sm\"\n                  />\n                  \n                  {report.downloadUrl && (\n                    <Button\n                      onClick={() => window.open(report.downloadUrl, '_blank')}\n                      variant=\"outline\"\n                      size=\"sm\"\n                    >\n                      Download PDF\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n          \n          {reports.length === 0 && (\n            <div className=\"px-6 py-8 text-center\">\n              <div className=\"text-gray-400 mb-2\">\n                <svg className=\"w-12 h-12 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                </svg>\n              </div>\n              <h3 className=\"text-sm font-medium text-gray-900 mb-1\">No reports yet</h3>\n              <p className=\"text-sm text-gray-500\">\n                Your accountant will generate your first report once you've uploaded some receipts.\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Messages Tab Component\nfunction MessagesTab({ \n  clientId, \n  accountant \n}: { \n  clientId: string\n  accountant: ClientPortalData['client']['accountant']\n}) {\n  const [messages, setMessages] = useState<Array<{\n    id: string\n    from: 'client' | 'accountant'\n    message: string\n    timestamp: string\n    read: boolean\n  }>>([])\n  const [newMessage, setNewMessage] = useState('')\n  const [sending, setSending] = useState(false)\n\n  const sendMessage = async () => {\n    if (!newMessage.trim() || sending) return\n\n    setSending(true)\n    try {\n      // In a real implementation, this would send to the API\n      const message = {\n        id: Date.now().toString(),\n        from: 'client' as const,\n        message: newMessage,\n        timestamp: new Date().toISOString(),\n        read: true\n      }\n      \n      setMessages(prev => [...prev, message])\n      setNewMessage('')\n      \n    } catch (error) {\n      logger.error('Error sending message', error as Error)\n    } finally {\n      setSending(false)\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h2 className=\"text-xl font-semibold text-gray-900\">Messages</h2>\n          <p className=\"text-gray-600 mt-1\">\n            Communicate directly with {accountant.name}\n          </p>\n        </div>\n        \n        {/* Messages List */}\n        <div className=\"h-96 overflow-y-auto p-6 space-y-4\">\n          {messages.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <div className=\"text-gray-400 mb-2\">\n                <svg className=\"w-12 h-12 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\" />\n                </svg>\n              </div>\n              <h3 className=\"text-sm font-medium text-gray-900 mb-1\">No messages yet</h3>\n              <p className=\"text-sm text-gray-500\">\n                Start a conversation with your accountant below.\n              </p>\n            </div>\n          ) : (\n            messages.map((message) => (\n              <div\n                key={message.id}\n                className={`flex ${\n                  message.from === 'client' ? 'justify-end' : 'justify-start'\n                }`}\n              >\n                <div\n                  className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\n                    message.from === 'client'\n                      ? 'bg-primary-600 text-white'\n                      : 'bg-gray-100 text-gray-900'\n                  }`}\n                >\n                  <p className=\"text-sm\">{message.message}</p>\n                  <p\n                    className={`text-xs mt-1 ${\n                      message.from === 'client' ? 'text-primary-100' : 'text-gray-500'\n                    }`}\n                  >\n                    {new Date(message.timestamp).toLocaleTimeString()}\n                  </p>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n        \n        {/* Message Input */}\n        <div className=\"px-6 py-4 border-t border-gray-200\">\n          <div className=\"flex space-x-3\">\n            <input\n              type=\"text\"\n              value={newMessage}\n              onChange={(e) => setNewMessage(e.target.value)}\n              onKeyPress={(e) => e.key === 'Enter' && sendMessage()}\n              placeholder=\"Type your message...\"\n              className=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500\"\n              disabled={sending}\n            />\n            <Button\n              onClick={sendMessage}\n              disabled={!newMessage.trim() || sending}\n              variant=\"primary\"\n            >\n              {sending ? 'Sending...' : 'Send'}\n            </Button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Contact Info */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Contact Information</h3>\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center space-x-3\">\n            <svg className=\"w-5 h-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n            </svg>\n            <span className=\"text-gray-900\">{accountant.name}</span>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <svg className=\"w-5 h-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\n            </svg>\n            <a href={`mailto:${accountant.email}`} className=\"text-primary-600 hover:text-primary-700\">\n              {accountant.email}\n            </a>\n          </div>\n          \n          {accountant.phone && (\n            <div className=\"flex items-center space-x-3\">\n              <svg className=\"w-5 h-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\" />\n              </svg>\n              <a href={`tel:${accountant.phone}`} className=\"text-primary-600 hover:text-primary-700\">\n                {accountant.phone}\n              </a>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n"