'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Button } from '@/components/ui/Button'\nimport { StatusBadge } from '@/components/ui/StatusBadge'\nimport { FinancialChart } from './FinancialChart'\nimport { CategoryBreakdown } from './CategoryBreakdown'\nimport { TrendAnalysis } from './TrendAnalysis'\nimport { KPICards } from './KPICards'\nimport { ReportBuilder } from './ReportBuilder'\nimport { logger } from '@/lib/logger'\n\ninterface AnalyticsData {\n  overview: {\n    currentIncome: number\n    currentExpenses: number\n    currentProfit: number\n    incomeGrowthRate: number\n    expenseGrowthRate: number\n    profitMargin: number\n  }\n  trends: {\n    incomeData: Array<{ month: string; amount: number }>\n    expenseData: Array<{ month: string; amount: number }>\n    profitData: Array<{ month: string; amount: number }>\n  }\n  categories: Array<{\n    name: string\n    amount: number\n    percentage: number\n    trend: 'up' | 'down' | 'stable'\n  }>\n  receipts: {\n    thisMonth: number\n    pending: number\n    processed: number\n    accuracy: number\n  }\n  performance: {\n    accuracyScore: number\n    avgProcessingTime: number\n    automationRate: number\n    clientSatisfaction: number\n  }\n  insights: Array<{\n    type: 'opportunity' | 'warning' | 'achievement'\n    title: string\n    description: string\n    impact: number\n    actionable: boolean\n  }>\n}\n\ninterface AnalyticsDashboardProps {\n  clientId?: string\n  accountantId?: string\n  userRole: 'client' | 'accountant'\n  timeRange: '7d' | '30d' | '90d' | '1y'\n  onTimeRangeChange: (range: '7d' | '30d' | '90d' | '1y') => void\n  className?: string\n}\n\nexport function AnalyticsDashboard({\n  clientId,\n  accountantId,\n  userRole,\n  timeRange,\n  onTimeRangeChange,\n  className\n}: AnalyticsDashboardProps) {\n  const [analyticsData, setAnalyticsData] = useState<AnalyticsData | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [activeTab, setActiveTab] = useState<'overview' | 'trends' | 'categories' | 'reports'>('overview')\n  const [refreshing, setRefreshing] = useState(false)\n\n  useEffect(() => {\n    loadAnalyticsData()\n    \n    // Set up real-time updates\n    const interval = setInterval(loadAnalyticsData, 30000) // Refresh every 30 seconds\n    \n    return () => clearInterval(interval)\n  }, [clientId, accountantId, timeRange])\n\n  const loadAnalyticsData = async () => {\n    try {\n      setError(null)\n      \n      const params = new URLSearchParams({\n        timeRange,\n        ...(clientId && { clientId }),\n        ...(accountantId && { accountantId })\n      })\n      \n      const response = await fetch(`/api/analytics/dashboard?${params}`)\n      \n      if (!response.ok) {\n        throw new Error(`Failed to load analytics: ${response.status}`)\n      }\n      \n      const data = await response.json()\n      setAnalyticsData(data)\n      \n    } catch (error) {\n      logger.error('Error loading analytics data', error as Error)\n      setError('Failed to load analytics data. Please try again.')\n    } finally {\n      setLoading(false)\n      setRefreshing(false)\n    }\n  }\n\n  const handleRefresh = async () => {\n    setRefreshing(true)\n    await loadAnalyticsData()\n  }\n\n  const handleExport = async (format: 'pdf' | 'excel') => {\n    try {\n      const params = new URLSearchParams({\n        format,\n        timeRange,\n        ...(clientId && { clientId }),\n        ...(accountantId && { accountantId })\n      })\n      \n      const response = await fetch(`/api/analytics/export?${params}`)\n      \n      if (response.ok) {\n        const blob = await response.blob()\n        const url = window.URL.createObjectURL(blob)\n        const a = document.createElement('a')\n        a.href = url\n        a.download = `analytics-report-${timeRange}.${format}`\n        document.body.appendChild(a)\n        a.click()\n        window.URL.revokeObjectURL(url)\n        document.body.removeChild(a)\n      }\n    } catch (error) {\n      logger.error('Error exporting analytics', error as Error)\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className={`bg-white rounded-lg shadow ${className}`}>\n        <div className=\"p-8 text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading analytics dashboard...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (error || !analyticsData) {\n    return (\n      <div className={`bg-white rounded-lg shadow ${className}`}>\n        <div className=\"p-8 text-center\">\n          <div className=\"text-red-500 mb-4\">\n            <svg className=\"w-16 h-16 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n          </div>\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Unable to Load Analytics</h2>\n          <p className=\"text-gray-600 mb-4\">{error}</p>\n          <Button onClick={loadAnalyticsData} variant=\"primary\">\n            Try Again\n          </Button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">\n              {userRole === 'client' ? 'Your Financial Analytics' : 'Client Analytics Dashboard'}\n            </h1>\n            <p className=\"text-gray-600 mt-1\">\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"mt-4 sm:mt-0 flex items-center space-x-3\">\n            {/* Time Range Selector */}\n            <div className=\"flex bg-gray-100 rounded-lg p-1\">\n              {[\n                { value: '7d', label: '7D' },\n                { value: '30d', label: '30D' },\n                { value: '90d', label: '90D' },\n                { value: '1y', label: '1Y' }\n              ].map((option) => (\n                <button\n                  key={option.value}\n                  onClick={() => onTimeRangeChange(option.value as any)}\n                  className={`px-3 py-1 text-sm font-medium rounded-md transition-colors ${\n                    timeRange === option.value\n                      ? 'bg-white text-primary-600 shadow-sm'\n                      : 'text-gray-500 hover:text-gray-700'\n                  }`}\n                >\n                  {option.label}\n                </button>\n              ))}\n            </div>\n            \n            {/* Actions */}\n            <Button\n              onClick={handleRefresh}\n              variant=\"ghost\"\n              size=\"sm\"\n              disabled={refreshing}\n              className=\"text-gray-500 hover:text-gray-700\"\n            >\n              {refreshing ? (\n                <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-gray-300 border-t-gray-600\" />\n              ) : (\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                </svg>\n              )}\n            </Button>\n            \n            <div className=\"relative\">\n              <Button\n                onClick={() => handleExport('pdf')}\n                variant=\"outline\"\n                size=\"sm\"\n              >\n                Export PDF\n              </Button>\n            </div>\n          </div>\n        </div>\n        \n        {/* Navigation Tabs */}\n        <div className=\"mt-6 border-b border-gray-200\">\n          <nav className=\"flex space-x-8\">\n            {[\n              { id: 'overview', label: 'Overview', icon: '📊' },\n              { id: 'trends', label: 'Trends', icon: '📈' },\n              { id: 'categories', label: 'Categories', icon: '🏷️' },\n              { id: 'reports', label: 'Reports', icon: '📋' }\n            ].map((tab) => (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id as any)}\n                className={`flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm ${\n                  activeTab === tab.id\n                    ? 'border-primary-500 text-primary-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                <span>{tab.icon}</span>\n                <span>{tab.label}</span>\n              </button>\n            ))}\n          </nav>\n        </div>\n      </div>\n\n      {/* Tab Content */}\n      {activeTab === 'overview' && (\n        <div className=\"space-y-6\">\n          {/* KPI Cards */}\n          <KPICards \n            overview={analyticsData.overview}\n            receipts={analyticsData.receipts}\n            performance={analyticsData.performance}\n          />\n          \n          {/* Main Charts Row */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <FinancialChart \n              title=\"Income vs Expenses\"\n              data={analyticsData.trends}\n              type=\"line\"\n              height={300}\n            />\n            \n            <CategoryBreakdown \n              title=\"Expense Categories\"\n              data={analyticsData.categories}\n              height={300}\n            />\n          </div>\n          \n          {/* Insights Section */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">AI-Powered Insights</h3>\n            <div className=\"space-y-4\">\n              {analyticsData.insights.map((insight, index) => (\n                <div\n                  key={index}\n                  className={`p-4 rounded-lg border-l-4 ${\n                    insight.type === 'opportunity' ? 'bg-green-50 border-green-400' :\n                    insight.type === 'warning' ? 'bg-yellow-50 border-yellow-400' :\n                    'bg-blue-50 border-blue-400'\n                  }`}\n                >\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <h4 className={`font-medium ${\n                        insight.type === 'opportunity' ? 'text-green-800' :\n                        insight.type === 'warning' ? 'text-yellow-800' :\n                        'text-blue-800'\n                      }`}>\n                        {insight.title}\n                      </h4>\n                      <p className={`text-sm mt-1 ${\n                        insight.type === 'opportunity' ? 'text-green-700' :\n                        insight.type === 'warning' ? 'text-yellow-700' :\n                        'text-blue-700'\n                      }`}>\n                        {insight.description}\n                      </p>\n                      {insight.impact > 0 && (\n                        <p className=\"text-xs mt-2 font-medium\">\n                          Potential impact: ${insight.impact.toLocaleString()}\n                        </p>\n                      )}\n                    </div>\n                    \n                    {insight.actionable && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"xs\"\n                        className={`ml-4 ${\n                          insight.type === 'opportunity' ? 'text-green-600 hover:text-green-700' :\n                          insight.type === 'warning' ? 'text-yellow-600 hover:text-yellow-700' :\n                          'text-blue-600 hover:text-blue-700'\n                        }`}\n                      >\n                        Take Action\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {activeTab === 'trends' && (\n        <TrendAnalysis \n          data={analyticsData.trends}\n          timeRange={timeRange}\n          insights={analyticsData.insights}\n        />\n      )}\n      \n      {activeTab === 'categories' && (\n        <div className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <CategoryBreakdown \n              title=\"Current Period Breakdown\"\n              data={analyticsData.categories}\n              height={400}\n              showTable\n            />\n            \n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Category Trends</h3>\n              <div className=\"space-y-4\">\n                {analyticsData.categories.map((category, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-gray-900\">{category.name}</h4>\n                      <p className=\"text-sm text-gray-600\">\n                        ${category.amount.toLocaleString()} ({category.percentage}%)\n                      </p>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <StatusBadge\n                        status={category.trend === 'up' ? 'warning' : category.trend === 'down' ? 'approved' : 'pending'}\n                        size=\"sm\"\n                      />\n                      <span className={`text-sm font-medium ${\n                        category.trend === 'up' ? 'text-red-600' :\n                        category.trend === 'down' ? 'text-green-600' :\n                        'text-gray-600'\n                      }`}>\n                        {category.trend === 'up' ? '↗' : category.trend === 'down' ? '↘' : '→'}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {activeTab === 'reports' && (\n        <ReportBuilder \n          clientId={clientId}\n          accountantId={accountantId}\n          userRole={userRole}\n          analyticsData={analyticsData}\n        />\n      )}\n    </div>\n  )\n}\n"