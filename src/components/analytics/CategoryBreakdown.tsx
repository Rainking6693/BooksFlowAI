'use client'\n\nimport { useEffect, useRef } from 'react'\nimport {\n  Chart as ChartJS,\n  ArcElement,\n  Tooltip,\n  Legend,\n  CategoryScale,\n  LinearScale\n} from 'chart.js'\nimport { Doughnut } from 'react-chartjs-2'\nimport { StatusBadge } from '@/components/ui/StatusBadge'\n\n// Register Chart.js components\nChartJS.register(ArcElement, Tooltip, Legend, CategoryScale, LinearScale)\n\ninterface CategoryData {\n  name: string\n  amount: number\n  percentage: number\n  trend: 'up' | 'down' | 'stable'\n}\n\ninterface CategoryBreakdownProps {\n  title: string\n  data: CategoryData[]\n  height?: number\n  showTable?: boolean\n  showTrends?: boolean\n  className?: string\n}\n\nexport function CategoryBreakdown({\n  title,\n  data,\n  height = 300,\n  showTable = false,\n  showTrends = true,\n  className\n}: CategoryBreakdownProps) {\n  const chartRef = useRef<ChartJS>(null)\n\n  // Color palette for categories\n  const colorPalette = [\n    '#3b82f6', // blue-500\n    '#10b981', // emerald-500\n    '#f59e0b', // amber-500\n    '#ef4444', // red-500\n    '#8b5cf6', // violet-500\n    '#06b6d4', // cyan-500\n    '#84cc16', // lime-500\n    '#f97316', // orange-500\n    '#ec4899', // pink-500\n    '#6b7280', // gray-500\n  ]\n\n  // Prepare chart data\n  const chartData = {\n    labels: data.map(item => item.name),\n    datasets: [\n      {\n        data: data.map(item => item.amount),\n        backgroundColor: data.map((_, index) => colorPalette[index % colorPalette.length]),\n        borderColor: data.map((_, index) => colorPalette[index % colorPalette.length]),\n        borderWidth: 2,\n        hoverBorderWidth: 3,\n        hoverOffset: 8\n      }\n    ]\n  }\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'right' as const,\n        labels: {\n          usePointStyle: true,\n          padding: 20,\n          font: {\n            size: 12,\n            weight: '500'\n          },\n          generateLabels: function(chart: any) {\n            const data = chart.data\n            if (data.labels.length && data.datasets.length) {\n              return data.labels.map((label: string, index: number) => {\n                const dataset = data.datasets[0]\n                const value = dataset.data[index]\n                const percentage = data.datasets[0].data.reduce((a: number, b: number) => a + b, 0) > 0 \n                  ? ((value / data.datasets[0].data.reduce((a: number, b: number) => a + b, 0)) * 100).toFixed(1)\n                  : '0'\n                \n                return {\n                  text: `${label} (${percentage}%)`,\n                  fillStyle: dataset.backgroundColor[index],\n                  strokeStyle: dataset.borderColor[index],\n                  lineWidth: dataset.borderWidth,\n                  hidden: false,\n                  index: index\n                }\n              })\n            }\n            return []\n          }\n        }\n      },\n      tooltip: {\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n        titleColor: '#ffffff',\n        bodyColor: '#ffffff',\n        borderColor: 'rgba(255, 255, 255, 0.1)',\n        borderWidth: 1,\n        cornerRadius: 8,\n        displayColors: true,\n        callbacks: {\n          label: function(context: any) {\n            const label = context.label || ''\n            const value = context.parsed\n            const total = context.dataset.data.reduce((a: number, b: number) => a + b, 0)\n            const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : '0'\n            return `${label}: $${value.toLocaleString()} (${percentage}%)`\n          }\n        }\n      }\n    },\n    cutout: '60%',\n    animation: {\n      animateRotate: true,\n      animateScale: true,\n      duration: 1000,\n      easing: 'easeInOutQuart'\n    },\n    interaction: {\n      intersect: false\n    }\n  }\n\n  // Calculate total amount\n  const totalAmount = data.reduce((sum, item) => sum + item.amount, 0)\n\n  // Get trend icon and color\n  const getTrendIcon = (trend: string) => {\n    switch (trend) {\n      case 'up': return '↗'\n      case 'down': return '↘'\n      default: return '→'\n    }\n  }\n\n  const getTrendColor = (trend: string) => {\n    switch (trend) {\n      case 'up': return 'text-red-600' // Red for expense increase\n      case 'down': return 'text-green-600' // Green for expense decrease\n      default: return 'text-gray-600'\n    }\n  }\n\n  const getTrendBadge = (trend: string) => {\n    switch (trend) {\n      case 'up': return 'warning'\n      case 'down': return 'approved'\n      default: return 'pending'\n    }\n  }\n\n  return (\n    <div className={`bg-white rounded-lg shadow ${className}`}>\n      {/* Header */}\n      <div className=\"px-6 py-4 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-medium text-gray-900\">{title}</h3>\n          \n          {/* Total Amount Display */}\n          <div className=\"text-right\">\n            <p className=\"text-sm text-gray-500\">Total Expenses</p>\n            <p className=\"text-xl font-bold text-gray-900\">\n              ${totalAmount.toLocaleString()}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Chart and Table Layout */}\n      <div className=\"p-6\">\n        {showTable ? (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Chart */}\n            <div className=\"relative\">\n              <div style={{ height: `${height}px` }}>\n                <Doughnut ref={chartRef} data={chartData} options={options} />\n              </div>\n              \n              {/* Center Label */}\n              <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {data.length}\n                  </p>\n                  <p className=\"text-sm text-gray-500\">\n                    Categories\n                  </p>\n                </div>\n              </div>\n            </div>\n            \n            {/* Table */}\n            <div className=\"space-y-3\">\n              <h4 className=\"font-medium text-gray-900 mb-4\">Category Details</h4>\n              <div className=\"max-h-80 overflow-y-auto\">\n                {data.map((category, index) => (\n                  <div\n                    key={category.name}\n                    className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\"\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <div\n                        className=\"w-4 h-4 rounded-full flex-shrink-0\"\n                        style={{ backgroundColor: colorPalette[index % colorPalette.length] }}\n                      ></div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"font-medium text-gray-900 truncate\">\n                          {category.name}\n                        </p>\n                        <p className=\"text-sm text-gray-500\">\n                          {category.percentage}% of total\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold text-gray-900\">\n                          ${category.amount.toLocaleString()}\n                        </p>\n                        {showTrends && (\n                          <div className={`flex items-center justify-end text-sm ${\n                            getTrendColor(category.trend)\n                          }`}>\n                            <span className=\"mr-1\">{getTrendIcon(category.trend)}</span>\n                            <span className=\"text-xs\">\n                              {category.trend === 'stable' ? 'Stable' : \n                               category.trend === 'up' ? 'Increasing' : 'Decreasing'}\n                            </span>\n                          </div>\n                        )}\n                      </div>\n                      \n                      {showTrends && (\n                        <StatusBadge\n                          status={getTrendBadge(category.trend) as any}\n                          size=\"xs\"\n                        />\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        ) : (\n          /* Chart Only */\n          <div className=\"relative\">\n            <div style={{ height: `${height}px` }}>\n              <Doughnut ref={chartRef} data={chartData} options={options} />\n            </div>\n            \n            {/* Center Label */}\n            <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n              <div className=\"text-center\">\n                <p className=\"text-3xl font-bold text-gray-900\">\n                  ${(totalAmount / 1000).toFixed(0)}K\n                </p>\n                <p className=\"text-sm text-gray-500\">\n                  Total Expenses\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Summary Footer */}\n      {!showTable && (\n        <div className=\"px-6 py-4 border-t border-gray-200 bg-gray-50\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">Top Category</p>\n              <p className=\"text-sm font-semibold text-gray-900\">\n                {data[0]?.name || 'N/A'}\n              </p>\n              <p className=\"text-xs text-gray-600\">\n                {data[0]?.percentage || 0}% of total\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">Categories</p>\n              <p className=\"text-sm font-semibold text-gray-900\">\n                {data.length}\n              </p>\n              <p className=\"text-xs text-gray-600\">\n                Active this period\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">Average</p>\n              <p className=\"text-sm font-semibold text-gray-900\">\n                ${data.length > 0 ? Math.round(totalAmount / data.length).toLocaleString() : '0'}\n              </p>\n              <p className=\"text-xs text-gray-600\">\n                Per category\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">Trends</p>\n              <div className=\"flex justify-center space-x-1 text-sm\">\n                <span className=\"text-red-600\">\n                  {data.filter(c => c.trend === 'up').length}↗\n                </span>\n                <span className=\"text-green-600\">\n                  {data.filter(c => c.trend === 'down').length}↘\n                </span>\n                <span className=\"text-gray-600\">\n                  {data.filter(c => c.trend === 'stable').length}→\n                </span>\n              </div>\n              <p className=\"text-xs text-gray-600\">\n                Up/Down/Stable\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\n// Utility function to generate sample category data for development\nexport function generateSampleCategoryData(): CategoryData[] {\n  const categories = [\n    'Office Supplies',\n    'Travel & Transportation',\n    'Meals & Entertainment',\n    'Professional Services',\n    'Utilities',\n    'Rent & Lease',\n    'Marketing & Advertising',\n    'Insurance',\n    'Software & Subscriptions',\n    'Equipment & Maintenance'\n  ]\n  \n  return categories.slice(0, 7).map((name, index) => {\n    const baseAmount = Math.random() * 5000 + 1000\n    const amount = Math.round(baseAmount)\n    const trends: ('up' | 'down' | 'stable')[] = ['up', 'down', 'stable']\n    const trend = trends[Math.floor(Math.random() * trends.length)]\n    \n    return {\n      name,\n      amount,\n      percentage: 0, // Will be calculated by the component\n      trend\n    }\n  }).sort((a, b) => b.amount - a.amount)\n}\n"