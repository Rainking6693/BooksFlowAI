'use client'\n\nimport { useEffect, useRef } from 'react'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler\n} from 'chart.js'\nimport { Chart } from 'react-chartjs-2'\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler\n)\n\ninterface ChartData {\n  incomeData: Array<{ month: string; amount: number }>\n  expenseData: Array<{ month: string; amount: number }>\n  profitData: Array<{ month: string; amount: number }>\n}\n\ninterface FinancialChartProps {\n  title: string\n  data: ChartData\n  type: 'line' | 'bar' | 'area'\n  height?: number\n  showProfit?: boolean\n  className?: string\n}\n\nexport function FinancialChart({\n  title,\n  data,\n  type = 'line',\n  height = 300,\n  showProfit = true,\n  className\n}: FinancialChartProps) {\n  const chartRef = useRef<ChartJS>(null)\n\n  // Prepare chart data\n  const chartData = {\n    labels: data.incomeData.map(item => item.month),\n    datasets: [\n      {\n        label: 'Income',\n        data: data.incomeData.map(item => item.amount),\n        borderColor: '#10b981', // green-500\n        backgroundColor: type === 'area' ? 'rgba(16, 185, 129, 0.1)' : '#10b981',\n        borderWidth: 2,\n        fill: type === 'area',\n        tension: 0.4,\n        pointBackgroundColor: '#10b981',\n        pointBorderColor: '#ffffff',\n        pointBorderWidth: 2,\n        pointRadius: 4,\n        pointHoverRadius: 6\n      },\n      {\n        label: 'Expenses',\n        data: data.expenseData.map(item => item.amount),\n        borderColor: '#ef4444', // red-500\n        backgroundColor: type === 'area' ? 'rgba(239, 68, 68, 0.1)' : '#ef4444',\n        borderWidth: 2,\n        fill: type === 'area',\n        tension: 0.4,\n        pointBackgroundColor: '#ef4444',\n        pointBorderColor: '#ffffff',\n        pointBorderWidth: 2,\n        pointRadius: 4,\n        pointHoverRadius: 6\n      },\n      ...(showProfit ? [{\n        label: 'Profit',\n        data: data.profitData.map(item => item.amount),\n        borderColor: '#3b82f6', // blue-500\n        backgroundColor: type === 'area' ? 'rgba(59, 130, 246, 0.1)' : '#3b82f6',\n        borderWidth: 2,\n        fill: type === 'area',\n        tension: 0.4,\n        pointBackgroundColor: '#3b82f6',\n        pointBorderColor: '#ffffff',\n        pointBorderWidth: 2,\n        pointRadius: 4,\n        pointHoverRadius: 6,\n        borderDash: [5, 5] // Dashed line for profit\n      }] : [])\n    ]\n  }\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    interaction: {\n      mode: 'index' as const,\n      intersect: false,\n    },\n    plugins: {\n      legend: {\n        position: 'top' as const,\n        labels: {\n          usePointStyle: true,\n          padding: 20,\n          font: {\n            size: 12,\n            weight: '500'\n          }\n        }\n      },\n      title: {\n        display: false // We'll use our own title\n      },\n      tooltip: {\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n        titleColor: '#ffffff',\n        bodyColor: '#ffffff',\n        borderColor: 'rgba(255, 255, 255, 0.1)',\n        borderWidth: 1,\n        cornerRadius: 8,\n        displayColors: true,\n        callbacks: {\n          label: function(context: any) {\n            const label = context.dataset.label || ''\n            const value = context.parsed.y\n            return `${label}: $${value.toLocaleString()}`\n          },\n          afterBody: function(tooltipItems: any[]) {\n            if (tooltipItems.length >= 2) {\n              const income = tooltipItems.find(item => item.dataset.label === 'Income')?.parsed.y || 0\n              const expenses = tooltipItems.find(item => item.dataset.label === 'Expenses')?.parsed.y || 0\n              const profit = income - expenses\n              const margin = income > 0 ? ((profit / income) * 100).toFixed(1) : '0'\n              return [`Net Profit: $${profit.toLocaleString()}`, `Profit Margin: ${margin}%`]\n            }\n            return []\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        display: true,\n        grid: {\n          display: false\n        },\n        ticks: {\n          font: {\n            size: 11\n          },\n          color: '#6b7280' // gray-500\n        }\n      },\n      y: {\n        display: true,\n        beginAtZero: true,\n        grid: {\n          color: 'rgba(0, 0, 0, 0.05)',\n          drawBorder: false\n        },\n        ticks: {\n          font: {\n            size: 11\n          },\n          color: '#6b7280', // gray-500\n          callback: function(value: any) {\n            return '$' + value.toLocaleString()\n          }\n        }\n      }\n    },\n    elements: {\n      point: {\n        hoverRadius: 8\n      }\n    },\n    animation: {\n      duration: 1000,\n      easing: 'easeInOutQuart'\n    }\n  }\n\n  // Calculate summary statistics\n  const totalIncome = data.incomeData.reduce((sum, item) => sum + item.amount, 0)\n  const totalExpenses = data.expenseData.reduce((sum, item) => sum + item.amount, 0)\n  const totalProfit = totalIncome - totalExpenses\n  const profitMargin = totalIncome > 0 ? ((totalProfit / totalIncome) * 100) : 0\n\n  const avgIncome = totalIncome / data.incomeData.length\n  const avgExpenses = totalExpenses / data.expenseData.length\n\n  // Calculate trends\n  const incomeGrowth = data.incomeData.length >= 2 ? \n    ((data.incomeData[data.incomeData.length - 1].amount - data.incomeData[0].amount) / data.incomeData[0].amount * 100) : 0\n  \n  const expenseGrowth = data.expenseData.length >= 2 ? \n    ((data.expenseData[data.expenseData.length - 1].amount - data.expenseData[0].amount) / data.expenseData[0].amount * 100) : 0\n\n  return (\n    <div className={`bg-white rounded-lg shadow ${className}`}>\n      {/* Header */}\n      <div className=\"px-6 py-4 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-medium text-gray-900\">{title}</h3>\n          \n          {/* Chart Type Selector */}\n          <div className=\"flex bg-gray-100 rounded-lg p-1\">\n            {[\n              { value: 'line', icon: '📈', label: 'Line' },\n              { value: 'bar', icon: '📊', label: 'Bar' },\n              { value: 'area', icon: '🏔️', label: 'Area' }\n            ].map((option) => (\n              <button\n                key={option.value}\n                onClick={() => {/* Handle type change */}}\n                className={`px-2 py-1 text-xs font-medium rounded-md transition-colors ${\n                  type === option.value\n                    ? 'bg-white text-primary-600 shadow-sm'\n                    : 'text-gray-500 hover:text-gray-700'\n                }`}\n                title={option.label}\n              >\n                {option.icon}\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Chart */}\n      <div className=\"p-6\">\n        <div style={{ height: `${height}px` }}>\n          <Chart\n            ref={chartRef}\n            type={type === 'area' ? 'line' : type}\n            data={chartData}\n            options={options}\n          />\n        </div>\n      </div>\n\n      {/* Summary Statistics */}\n      <div className=\"px-6 py-4 border-t border-gray-200 bg-gray-50\">\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"text-center\">\n            <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">Total Income</p>\n            <p className=\"text-lg font-semibold text-green-600\">\n              ${totalIncome.toLocaleString()}\n            </p>\n            <p className={`text-xs ${\n              incomeGrowth >= 0 ? 'text-green-600' : 'text-red-600'\n            }`}>\n              {incomeGrowth >= 0 ? '↗' : '↘'} {Math.abs(incomeGrowth).toFixed(1)}%\n            </p>\n          </div>\n          \n          <div className=\"text-center\">\n            <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">Total Expenses</p>\n            <p className=\"text-lg font-semibold text-red-600\">\n              ${totalExpenses.toLocaleString()}\n            </p>\n            <p className={`text-xs ${\n              expenseGrowth <= 0 ? 'text-green-600' : 'text-red-600'\n            }`}>\n              {expenseGrowth >= 0 ? '↗' : '↘'} {Math.abs(expenseGrowth).toFixed(1)}%\n            </p>\n          </div>\n          \n          <div className=\"text-center\">\n            <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">Net Profit</p>\n            <p className={`text-lg font-semibold ${\n              totalProfit >= 0 ? 'text-blue-600' : 'text-red-600'\n            }`}>\n              ${totalProfit.toLocaleString()}\n            </p>\n            <p className=\"text-xs text-gray-600\">\n              {profitMargin.toFixed(1)}% margin\n            </p>\n          </div>\n          \n          <div className=\"text-center\">\n            <p className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">Avg Monthly</p>\n            <p className=\"text-lg font-semibold text-gray-900\">\n              ${avgIncome.toLocaleString()}\n            </p>\n            <p className=\"text-xs text-gray-600\">\n              Income avg\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Utility function to generate sample data for development\nexport function generateSampleChartData(months: number = 12): ChartData {\n  const monthNames = [\n    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n  ]\n  \n  const data: ChartData = {\n    incomeData: [],\n    expenseData: [],\n    profitData: []\n  }\n  \n  for (let i = 0; i < months; i++) {\n    const month = monthNames[i % 12]\n    const baseIncome = 15000 + Math.random() * 10000\n    const baseExpenses = 8000 + Math.random() * 6000\n    \n    const income = Math.round(baseIncome)\n    const expenses = Math.round(baseExpenses)\n    const profit = income - expenses\n    \n    data.incomeData.push({ month, amount: income })\n    data.expenseData.push({ month, amount: expenses })\n    data.profitData.push({ month, amount: profit })\n  }\n  \n  return data\n}\n"