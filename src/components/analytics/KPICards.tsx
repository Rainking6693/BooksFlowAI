'use client'\n\nimport { useState, useEffect } from 'react'\nimport { StatusBadge } from '@/components/ui/StatusBadge'\n\ninterface KPIData {\n  overview: {\n    currentIncome: number\n    currentExpenses: number\n    currentProfit: number\n    incomeGrowthRate: number\n    expenseGrowthRate: number\n    profitMargin: number\n  }\n  receipts: {\n    thisMonth: number\n    pending: number\n    processed: number\n    accuracy: number\n  }\n  performance: {\n    accuracyScore: number\n    avgProcessingTime: number\n    automationRate: number\n    clientSatisfaction: number\n  }\n}\n\ninterface KPICardsProps {\n  overview: KPIData['overview']\n  receipts: KPIData['receipts']\n  performance: KPIData['performance']\n  className?: string\n}\n\nexport function KPICards({ overview, receipts, performance, className }: KPICardsProps) {\n  const [animatedValues, setAnimatedValues] = useState({\n    income: 0,\n    expenses: 0,\n    profit: 0,\n    margin: 0\n  })\n\n  // Animate numbers on mount\n  useEffect(() => {\n    const duration = 1000 // 1 second\n    const steps = 60 // 60 FPS\n    const stepDuration = duration / steps\n\n    let currentStep = 0\n    const interval = setInterval(() => {\n      currentStep++\n      const progress = currentStep / steps\n      const easeOutQuart = 1 - Math.pow(1 - progress, 4)\n\n      setAnimatedValues({\n        income: Math.round(overview.currentIncome * easeOutQuart),\n        expenses: Math.round(overview.currentExpenses * easeOutQuart),\n        profit: Math.round(overview.currentProfit * easeOutQuart),\n        margin: Math.round(overview.profitMargin * easeOutQuart * 100) / 100\n      })\n\n      if (currentStep >= steps) {\n        clearInterval(interval)\n        setAnimatedValues({\n          income: overview.currentIncome,\n          expenses: overview.currentExpenses,\n          profit: overview.currentProfit,\n          margin: overview.profitMargin\n        })\n      }\n    }, stepDuration)\n\n    return () => clearInterval(interval)\n  }, [overview])\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount)\n  }\n\n  const formatPercentage = (value: number, showSign: boolean = true) => {\n    const sign = showSign && value > 0 ? '+' : ''\n    return `${sign}${value.toFixed(1)}%`\n  }\n\n  const getGrowthColor = (value: number) => {\n    if (value > 0) return 'text-green-600'\n    if (value < 0) return 'text-red-600'\n    return 'text-gray-600'\n  }\n\n  const getGrowthIcon = (value: number) => {\n    if (value > 0) return '‚Üó'\n    if (value < 0) return '‚Üò'\n    return '‚Üí'\n  }\n\n  const kpiCards = [\n    {\n      id: 'income',\n      title: 'Total Income',\n      value: formatCurrency(animatedValues.income),\n      change: overview.incomeGrowthRate,\n      icon: 'üí∞',\n      color: 'bg-green-50 border-green-200',\n      iconColor: 'text-green-600',\n      description: 'Revenue this period'\n    },\n    {\n      id: 'expenses',\n      title: 'Total Expenses',\n      value: formatCurrency(animatedValues.expenses),\n      change: overview.expenseGrowthRate,\n      icon: 'üí∏',\n      color: 'bg-red-50 border-red-200',\n      iconColor: 'text-red-600',\n      description: 'Costs this period'\n    },\n    {\n      id: 'profit',\n      title: 'Net Profit',\n      value: formatCurrency(animatedValues.profit),\n      change: ((overview.currentProfit / (overview.currentIncome || 1)) * 100) - 100,\n      icon: 'üìà',\n      color: animatedValues.profit >= 0 ? 'bg-blue-50 border-blue-200' : 'bg-red-50 border-red-200',\n      iconColor: animatedValues.profit >= 0 ? 'text-blue-600' : 'text-red-600',\n      description: 'Income minus expenses'\n    },\n    {\n      id: 'margin',\n      title: 'Profit Margin',\n      value: `${animatedValues.margin.toFixed(1)}%`,\n      change: 0, // Would need historical data to calculate\n      icon: 'üéØ',\n      color: 'bg-purple-50 border-purple-200',\n      iconColor: 'text-purple-600',\n      description: 'Profitability ratio'\n    }\n  ]\n\n  const performanceCards = [\n    {\n      id: 'receipts',\n      title: 'Receipts Processed',\n      value: receipts.thisMonth.toString(),\n      subtitle: `${receipts.pending} pending`,\n      icon: 'üìÑ',\n      color: 'bg-indigo-50 border-indigo-200',\n      iconColor: 'text-indigo-600',\n      progress: receipts.thisMonth > 0 ? (receipts.processed / receipts.thisMonth) * 100 : 0\n    },\n    {\n      id: 'accuracy',\n      title: 'Processing Accuracy',\n      value: `${performance.accuracyScore}%`,\n      subtitle: 'OCR & categorization',\n      icon: 'üéØ',\n      color: 'bg-emerald-50 border-emerald-200',\n      iconColor: 'text-emerald-600',\n      progress: performance.accuracyScore\n    },\n    {\n      id: 'automation',\n      title: 'Automation Rate',\n      value: `${performance.automationRate}%`,\n      subtitle: 'Automated processing',\n      icon: 'ü§ñ',\n      color: 'bg-cyan-50 border-cyan-200',\n      iconColor: 'text-cyan-600',\n      progress: performance.automationRate\n    },\n    {\n      id: 'satisfaction',\n      title: 'Client Satisfaction',\n      value: `${performance.clientSatisfaction}/5`,\n      subtitle: 'Average rating',\n      icon: '‚≠ê',\n      color: 'bg-amber-50 border-amber-200',\n      iconColor: 'text-amber-600',\n      progress: (performance.clientSatisfaction / 5) * 100\n    }\n  ]\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Financial KPIs */}\n      <div>\n        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Financial Overview</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {kpiCards.map((card) => (\n            <div\n              key={card.id}\n              className={`relative overflow-hidden rounded-lg border-2 ${card.color} p-6 transition-all duration-200 hover:shadow-md hover:scale-105 cursor-pointer group`}\n            >\n              {/* Background Pattern */}\n              <div className=\"absolute inset-0 opacity-5\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-transparent to-black\"></div>\n              </div>\n              \n              {/* Content */}\n              <div className=\"relative\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className={`text-2xl ${card.iconColor}`}>\n                    {card.icon}\n                  </div>\n                  {card.change !== 0 && (\n                    <div className={`flex items-center text-sm font-medium ${\n                      getGrowthColor(card.change)\n                    }`}>\n                      <span className=\"mr-1\">{getGrowthIcon(card.change)}</span>\n                      {formatPercentage(Math.abs(card.change))}\n                    </div>\n                  )}\n                </div>\n                \n                <div className=\"space-y-1\">\n                  <p className=\"text-sm font-medium text-gray-600\">{card.title}</p>\n                  <p className=\"text-2xl font-bold text-gray-900 group-hover:scale-110 transition-transform duration-200\">\n                    {card.value}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">{card.description}</p>\n                </div>\n              </div>\n              \n              {/* Hover Effect */}\n              <div className=\"absolute inset-0 bg-gradient-to-r from-transparent to-white opacity-0 group-hover:opacity-10 transition-opacity duration-200\"></div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Performance KPIs */}\n      <div>\n        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Performance Metrics</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {performanceCards.map((card) => (\n            <div\n              key={card.id}\n              className={`relative overflow-hidden rounded-lg border-2 ${card.color} p-6 transition-all duration-200 hover:shadow-md hover:scale-105 cursor-pointer group`}\n            >\n              {/* Content */}\n              <div className=\"relative\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className={`text-2xl ${card.iconColor}`}>\n                    {card.icon}\n                  </div>\n                  <StatusBadge\n                    status={card.progress >= 90 ? 'approved' : card.progress >= 70 ? 'pending' : 'error'}\n                    size=\"xs\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <p className=\"text-sm font-medium text-gray-600\">{card.title}</p>\n                  <p className=\"text-2xl font-bold text-gray-900 group-hover:scale-110 transition-transform duration-200\">\n                    {card.value}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">{card.subtitle}</p>\n                  \n                  {/* Progress Bar */}\n                  <div className=\"mt-3\">\n                    <div className=\"flex items-center justify-between text-xs text-gray-500 mb-1\">\n                      <span>Progress</span>\n                      <span>{card.progress.toFixed(0)}%</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div\n                        className={`h-2 rounded-full transition-all duration-1000 ease-out ${\n                          card.progress >= 90 ? 'bg-green-500' :\n                          card.progress >= 70 ? 'bg-yellow-500' : 'bg-red-500'\n                        }`}\n                        style={{ width: `${Math.min(card.progress, 100)}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Hover Effect */}\n              <div className=\"absolute inset-0 bg-gradient-to-r from-transparent to-white opacity-0 group-hover:opacity-10 transition-opacity duration-200\"></div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Quick Stats Summary */}\n      <div className=\"bg-gradient-to-r from-gray-50 to-gray-100 rounded-lg p-6\">\n        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Quick Summary</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-green-600 mb-1\">\n              {overview.currentIncome > overview.currentExpenses ? 'üìà' : 'üìâ'}\n            </div>\n            <p className=\"text-sm font-medium text-gray-900\">\n              {overview.currentIncome > overview.currentExpenses ? 'Profitable Period' : 'Loss Period'}\n            </p>\n            <p className=\"text-xs text-gray-500\">\n              {overview.currentIncome > overview.currentExpenses \n                ? `${formatCurrency(overview.currentProfit)} profit generated`\n                : `${formatCurrency(Math.abs(overview.currentProfit))} loss incurred`\n              }\n            </p>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-blue-600 mb-1\">\n              {receipts.accuracy >= 90 ? 'üéØ' : receipts.accuracy >= 70 ? '‚ö†Ô∏è' : '‚ùå'}\n            </div>\n            <p className=\"text-sm font-medium text-gray-900\">\n              {receipts.accuracy >= 90 ? 'Excellent Accuracy' : \n               receipts.accuracy >= 70 ? 'Good Accuracy' : 'Needs Improvement'}\n            </p>\n            <p className=\"text-xs text-gray-500\">\n              {receipts.processed} of {receipts.thisMonth} receipts processed\n            </p>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-purple-600 mb-1\">\n              {performance.automationRate >= 80 ? 'ü§ñ' : performance.automationRate >= 60 ? '‚öôÔ∏è' : 'üë§'}\n            </div>\n            <p className=\"text-sm font-medium text-gray-900\">\n              {performance.automationRate >= 80 ? 'Highly Automated' : \n               performance.automationRate >= 60 ? 'Partially Automated' : 'Manual Processing'}\n            </p>\n            <p className=\"text-xs text-gray-500\">\n              {performance.automationRate}% of tasks automated\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Utility function to generate sample KPI data for development\nexport function generateSampleKPIData(): KPIData {\n  return {\n    overview: {\n      currentIncome: 45230,\n      currentExpenses: 32180,\n      currentProfit: 13050,\n      incomeGrowthRate: 12.5,\n      expenseGrowthRate: -3.2,\n      profitMargin: 28.9\n    },\n    receipts: {\n      thisMonth: 47,\n      pending: 3,\n      processed: 44,\n      accuracy: 94\n    },\n    performance: {\n      accuracyScore: 94,\n      avgProcessingTime: 1200,\n      automationRate: 87,\n      clientSatisfaction: 4.6\n    }\n  }\n}\n"