'use client'\n\nimport { useState, useCallback } from 'react'\n// Simple drag and drop implementation\nimport { Button } from '@/components/ui/Button'\nimport { StatusBadge } from '@/components/ui/StatusBadge'\nimport { logger } from '@/lib/logger'\nimport { formatFileSize } from '@/lib/utils'\n\ninterface UploadedReceipt {\n  id: string\n  fileName: string\n  fileSize: number\n  uploadedAt: string\n  status: 'uploading' | 'uploaded' | 'processing' | 'processed' | 'error'\n  processingStatus?: 'queued' | 'processing' | 'completed' | 'failed'\n  ocr?: {\n    vendor?: string\n    amount?: number\n    date?: string\n    confidence?: number\n  }\n  error?: string\n}\n\ninterface ReceiptUploadProps {\n  clientId: string\n  accountantId: string\n  onUploadComplete?: (receipt: UploadedReceipt) => void\n  maxFiles?: number\n  className?: string\n}\n\nexport function ReceiptUpload({\n  clientId,\n  accountantId,\n  onUploadComplete,\n  maxFiles = 10,\n  className\n}: ReceiptUploadProps) {\n  const [uploadedReceipts, setUploadedReceipts] = useState<UploadedReceipt[]>([])\n  const [isUploading, setIsUploading] = useState(false)\n  const [uploadProgress, setUploadProgress] = useState<Record<string, number>>({})\n\n  const onDrop = useCallback(async (acceptedFiles: File[]) => {\n    if (acceptedFiles.length === 0) return\n\n    setIsUploading(true)\n    const newReceipts: UploadedReceipt[] = []\n\n    for (const file of acceptedFiles.slice(0, maxFiles)) {\n      const receiptId = `temp-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n      \n      const newReceipt: UploadedReceipt = {\n        id: receiptId,\n        fileName: file.name,\n        fileSize: file.size,\n        uploadedAt: new Date().toISOString(),\n        status: 'uploading'\n      }\n\n      newReceipts.push(newReceipt)\n      setUploadedReceipts(prev => [...prev, newReceipt])\n      setUploadProgress(prev => ({ ...prev, [receiptId]: 0 }))\n\n      try {\n        await uploadFile(file, receiptId, clientId, accountantId)\n      } catch (error) {\n        logger.error('File upload failed', error as Error, {\n          fileName: file.name,\n          fileSize: file.size\n        })\n        \n        setUploadedReceipts(prev => \n          prev.map(receipt => \n            receipt.id === receiptId \n              ? { ...receipt, status: 'error', error: 'Upload failed' }\n              : receipt\n          )\n        )\n      }\n    }\n\n    setIsUploading(false)\n  }, [clientId, accountantId, maxFiles])\n\n  const uploadFile = async (\n    file: File, \n    receiptId: string, \n    clientId: string, \n    accountantId: string\n  ) => {\n    const formData = new FormData()\n    formData.append('receipt', file)\n    formData.append('clientId', clientId)\n    formData.append('accountantId', accountantId)\n\n    // Simulate upload progress\n    const progressInterval = setInterval(() => {\n      setUploadProgress(prev => {\n        const currentProgress = prev[receiptId] || 0\n        const newProgress = Math.min(currentProgress + Math.random() * 20, 90)\n        return { ...prev, [receiptId]: newProgress }\n      })\n    }, 200)\n\n    try {\n      const response = await fetch('/api/receipts/upload', {\n        method: 'POST',\n        body: formData\n      })\n\n      clearInterval(progressInterval)\n      setUploadProgress(prev => ({ ...prev, [receiptId]: 100 }))\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.error || 'Upload failed')\n      }\n\n      const result = await response.json()\n      \n      // Update receipt with server response\n      setUploadedReceipts(prev => \n        prev.map(receipt => \n          receipt.id === receiptId \n            ? {\n                ...receipt,\n                id: result.receipt.id,\n                status: 'uploaded',\n                processingStatus: 'queued'\n              }\n            : receipt\n        )\n      )\n\n      // Start polling for OCR processing status\n      pollProcessingStatus(result.receipt.id)\n\n      if (onUploadComplete) {\n        onUploadComplete({\n          id: result.receipt.id,\n          fileName: file.name,\n          fileSize: file.size,\n          uploadedAt: result.receipt.uploadedAt,\n          status: 'uploaded',\n          processingStatus: 'queued'\n        })\n      }\n\n      logger.info('Receipt uploaded successfully', {\n        receiptId: result.receipt.id,\n        fileName: file.name\n      })\n\n    } catch (error) {\n      clearInterval(progressInterval)\n      throw error\n    }\n  }\n\n  const pollProcessingStatus = async (receiptId: string) => {\n    const maxAttempts = 30 // 5 minutes with 10-second intervals\n    let attempts = 0\n\n    const poll = async () => {\n      try {\n        const response = await fetch(\n          `/api/receipts/upload?clientId=${clientId}&accountantId=${accountantId}`\n        )\n        \n        if (response.ok) {\n          const data = await response.json()\n          const receipt = data.receipts?.find((r: any) => r.id === receiptId)\n          \n          if (receipt && receipt.status === 'processed') {\n            setUploadedReceipts(prev => \n              prev.map(r => \n                r.id === receiptId \n                  ? {\n                      ...r,\n                      status: 'processed',\n                      processingStatus: 'completed',\n                      ocr: receipt.ocr\n                    }\n                  : r\n              )\n            )\n            return // Stop polling\n          }\n        }\n        \n        attempts++\n        if (attempts < maxAttempts) {\n          setTimeout(poll, 10000) // Poll every 10 seconds\n        } else {\n          // Timeout - mark as processing failed\n          setUploadedReceipts(prev => \n            prev.map(r => \n              r.id === receiptId \n                ? { ...r, processingStatus: 'failed', error: 'Processing timeout' }\n                : r\n            )\n          )\n        }\n      } catch (error) {\n        logger.error('Error polling processing status', error as Error, { receiptId })\n        attempts++\n        if (attempts < maxAttempts) {\n          setTimeout(poll, 10000)\n        }\n      }\n    }\n\n    // Start polling after a short delay\n    setTimeout(poll, 5000)\n  }\n\n  const removeReceipt = (receiptId: string) => {\n    setUploadedReceipts(prev => prev.filter(r => r.id !== receiptId))\n    setUploadProgress(prev => {\n      const newProgress = { ...prev }\n      delete newProgress[receiptId]\n      return newProgress\n    })\n  }\n\n  const retryUpload = async (receiptId: string) => {\n    const receipt = uploadedReceipts.find(r => r.id === receiptId)\n    if (!receipt) return\n\n    // Reset receipt status\n    setUploadedReceipts(prev => \n      prev.map(r => \n        r.id === receiptId \n          ? { ...r, status: 'uploading', error: undefined }\n          : r\n      )\n    )\n\n    // Note: In a real implementation, you'd need to store the original File object\n    // For now, we'll just show an error message\n    setUploadedReceipts(prev => \n      prev.map(r => \n        r.id === receiptId \n          ? { ...r, status: 'error', error: 'Please re-upload the file' }\n          : r\n      )\n    )\n  }\n\n  const { getRootProps, getInputProps, isDragActive, isDragReject } = useDropzone({\n    onDrop,\n    accept: {\n      'image/jpeg': ['.jpg', '.jpeg'],\n      'image/png': ['.png'],\n      'image/webp': ['.webp'],\n      'application/pdf': ['.pdf']\n    },\n    maxSize: 10 * 1024 * 1024, // 10MB\n    maxFiles,\n    disabled: isUploading\n  })\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'uploading':\n        return 'processing'\n      case 'uploaded':\n        return 'synced'\n      case 'processed':\n        return 'approved'\n      case 'error':\n        return 'error'\n      default:\n        return 'pending'\n    }\n  }\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Upload Zone */}\n      <div\n        {...getRootProps()}\n        className={`\n          border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors\n          ${\n            isDragActive && !isDragReject\n              ? 'border-primary-500 bg-primary-50'\n              : isDragReject\n              ? 'border-error-500 bg-error-50'\n              : 'border-gray-300 hover:border-gray-400'\n          }\n          ${isUploading ? 'opacity-50 cursor-not-allowed' : ''}\n        `}\n      >\n        <input {...getInputProps()} />\n        \n        <div className=\"space-y-4\">\n          <div className=\"mx-auto w-16 h-16 text-gray-400\">\n            <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1.5} d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\" />\n            </svg>\n          </div>\n          \n          <div>\n            <h3 className=\"text-lg font-medium text-gray-900\">\n              {isDragActive ? 'Drop receipts here' : 'Upload Receipt Images'}\n            </h3>\n            <p className=\"text-sm text-gray-500 mt-1\">\n              {isDragReject\n                ? 'Some files are not supported'\n                : 'Drag & drop receipt images or PDFs, or click to browse'\n              }\n            </p>\n          </div>\n          \n          <div className=\"text-xs text-gray-400\">\n            <p>Supported formats: JPG, PNG, WebP, PDF</p>\n            <p>Maximum file size: 10MB per file</p>\n            <p>Maximum {maxFiles} files at once</p>\n          </div>\n          \n          {!isUploading && (\n            <Button variant=\"primary\" size=\"sm\">\n              Choose Files\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Upload Progress & Results */}\n      {uploadedReceipts.length > 0 && (\n        <div className=\"space-y-4\">\n          <h4 className=\"text-lg font-medium text-gray-900\">\n            Uploaded Receipts ({uploadedReceipts.length})\n          </h4>\n          \n          <div className=\"space-y-3\">\n            {uploadedReceipts.map((receipt) => (\n              <div\n                key={receipt.id}\n                className=\"bg-white border border-gray-200 rounded-lg p-4\"\n              >\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"flex-shrink-0\">\n                        <svg className=\"w-8 h-8 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                        </svg>\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm font-medium text-gray-900 truncate\">\n                          {receipt.fileName}\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          {formatFileSize(receipt.fileSize)} • {new Date(receipt.uploadedAt).toLocaleString()}\n                        </p>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2\">\n                        <StatusBadge \n                          status={getStatusColor(receipt.status) as any}\n                          size=\"sm\"\n                        />\n                        \n                        {receipt.status === 'error' && (\n                          <Button\n                            onClick={() => retryUpload(receipt.id)}\n                            variant=\"outline\"\n                            size=\"xs\"\n                          >\n                            Retry\n                          </Button>\n                        )}\n                        \n                        <Button\n                          onClick={() => removeReceipt(receipt.id)}\n                          variant=\"ghost\"\n                          size=\"xs\"\n                          className=\"text-gray-400 hover:text-gray-600\"\n                        >\n                          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                          </svg>\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    {/* Upload Progress */}\n                    {receipt.status === 'uploading' && uploadProgress[receipt.id] !== undefined && (\n                      <div className=\"mt-2\">\n                        <div className=\"flex items-center justify-between text-xs text-gray-500 mb-1\">\n                          <span>Uploading...</span>\n                          <span>{Math.round(uploadProgress[receipt.id])}%</span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-1.5\">\n                          <div\n                            className=\"bg-primary-600 h-1.5 rounded-full transition-all duration-300\"\n                            style={{ width: `${uploadProgress[receipt.id]}%` }}\n                          ></div>\n                        </div>\n                      </div>\n                    )}\n                    \n                    {/* Processing Status */}\n                    {receipt.status === 'uploaded' && receipt.processingStatus && (\n                      <div className=\"mt-2\">\n                        <div className=\"flex items-center space-x-2 text-xs text-gray-500\">\n                          <div className=\"animate-spin rounded-full h-3 w-3 border border-primary-600 border-t-transparent\"></div>\n                          <span>\n                            {receipt.processingStatus === 'queued' && 'Queued for processing...'}\n                            {receipt.processingStatus === 'processing' && 'Processing with OCR...'}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    \n                    {/* OCR Results */}\n                    {receipt.status === 'processed' && receipt.ocr && (\n                      <div className=\"mt-3 p-3 bg-green-50 rounded-md\">\n                        <div className=\"text-xs font-medium text-green-800 mb-2\">\n                          OCR Processing Complete\n                        </div>\n                        <div className=\"grid grid-cols-3 gap-2 text-xs\">\n                          {receipt.ocr.vendor && (\n                            <div>\n                              <span className=\"text-gray-500\">Vendor:</span>\n                              <div className=\"font-medium text-gray-900\">{receipt.ocr.vendor}</div>\n                            </div>\n                          )}\n                          {receipt.ocr.amount && (\n                            <div>\n                              <span className=\"text-gray-500\">Amount:</span>\n                              <div className=\"font-medium text-gray-900\">${receipt.ocr.amount.toFixed(2)}</div>\n                            </div>\n                          )}\n                          {receipt.ocr.date && (\n                            <div>\n                              <span className=\"text-gray-500\">Date:</span>\n                              <div className=\"font-medium text-gray-900\">\n                                {new Date(receipt.ocr.date).toLocaleDateString()}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                        {receipt.ocr.confidence && (\n                          <div className=\"mt-2 text-xs text-gray-500\">\n                            Confidence: {Math.round(receipt.ocr.confidence * 100)}%\n                          </div>\n                        )}\n                      </div>\n                    )}\n                    \n                    {/* Error Message */}\n                    {receipt.error && (\n                      <div className=\"mt-2 p-2 bg-error-50 rounded text-xs text-error-700\">\n                        {receipt.error}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      \n      {/* Upload Tips */}\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n        <h5 className=\"text-sm font-medium text-blue-900 mb-2\">\n          📸 Tips for Better OCR Results\n        </h5>\n        <ul className=\"text-xs text-blue-700 space-y-1\">\n          <li>• Ensure receipts are well-lit and clearly visible</li>\n          <li>• Avoid shadows, glare, or blurry images</li>\n          <li>• Include the entire receipt with all edges visible</li>\n          <li>• For crumpled receipts, flatten them before photographing</li>\n          <li>• PDF scans often provide the best OCR accuracy</li>\n        </ul>\n      </div>\n    </div>\n  )\n}\n"