'use client'\n\nimport { useState, useEffect, useRef } from 'react'\nimport { Button } from '@/components/ui/Button'\nimport { StatusBadge } from '@/components/ui/StatusBadge'\nimport { logger } from '@/lib/logger'\n\ninterface Message {\n  id: string\n  from: 'client' | 'accountant' | 'system'\n  fromName: string\n  message: string\n  timestamp: string\n  read: boolean\n  type?: 'text' | 'file' | 'system_notification'\n  attachments?: Array<{\n    id: string\n    name: string\n    url: string\n    type: string\n    size: number\n  }>\n  metadata?: {\n    receiptId?: string\n    reportId?: string\n    transactionId?: string\n  }\n}\n\ninterface Participant {\n  id: string\n  name: string\n  email: string\n  role: 'client' | 'accountant'\n  avatar?: string\n  status: 'online' | 'away' | 'offline'\n  lastSeen?: string\n}\n\ninterface MessageCenterProps {\n  currentUserId: string\n  currentUserRole: 'client' | 'accountant'\n  conversationId: string\n  participants: Participant[]\n  onSendMessage?: (message: string, attachments?: File[]) => Promise<void>\n  onMarkAsRead?: (messageIds: string[]) => Promise<void>\n  className?: string\n}\n\nexport function MessageCenter({\n  currentUserId,\n  currentUserRole,\n  conversationId,\n  participants,\n  onSendMessage,\n  onMarkAsRead,\n  className\n}: MessageCenterProps) {\n  const [messages, setMessages] = useState<Message[]>([])\n  const [newMessage, setNewMessage] = useState('')\n  const [sending, setSending] = useState(false)\n  const [loading, setLoading] = useState(true)\n  const [attachments, setAttachments] = useState<File[]>([])\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false)\n  const messagesEndRef = useRef<HTMLDivElement>(null)\n  const fileInputRef = useRef<HTMLInputElement>(null)\n\n  const otherParticipant = participants.find(p => p.id !== currentUserId)\n\n  useEffect(() => {\n    loadMessages()\n  }, [conversationId])\n\n  useEffect(() => {\n    scrollToBottom()\n  }, [messages])\n\n  useEffect(() => {\n    // Mark unread messages as read when component mounts or messages change\n    const unreadMessages = messages.filter(m => !m.read && m.from !== currentUserRole)\n    if (unreadMessages.length > 0 && onMarkAsRead) {\n      onMarkAsRead(unreadMessages.map(m => m.id))\n    }\n  }, [messages, currentUserRole, onMarkAsRead])\n\n  const loadMessages = async () => {\n    try {\n      setLoading(true)\n      \n      const response = await fetch(`/api/messages?conversationId=${conversationId}`)\n      \n      if (response.ok) {\n        const data = await response.json()\n        setMessages(data.messages || [])\n      } else {\n        logger.error('Failed to load messages', new Error(`HTTP ${response.status}`))\n      }\n    } catch (error) {\n      logger.error('Error loading messages', error as Error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })\n  }\n\n  const handleSendMessage = async () => {\n    if ((!newMessage.trim() && attachments.length === 0) || sending) return\n\n    setSending(true)\n    try {\n      if (onSendMessage) {\n        await onSendMessage(newMessage.trim(), attachments)\n      }\n      \n      // Add message optimistically to UI\n      const optimisticMessage: Message = {\n        id: `temp-${Date.now()}`,\n        from: currentUserRole,\n        fromName: 'You',\n        message: newMessage.trim(),\n        timestamp: new Date().toISOString(),\n        read: true,\n        type: attachments.length > 0 ? 'file' : 'text',\n        attachments: attachments.map(file => ({\n          id: `temp-${Date.now()}-${file.name}`,\n          name: file.name,\n          url: URL.createObjectURL(file),\n          type: file.type,\n          size: file.size\n        }))\n      }\n      \n      setMessages(prev => [...prev, optimisticMessage])\n      setNewMessage('')\n      setAttachments([])\n      \n    } catch (error) {\n      logger.error('Error sending message', error as Error)\n    } finally {\n      setSending(false)\n    }\n  }\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || [])\n    setAttachments(prev => [...prev, ...files])\n  }\n\n  const removeAttachment = (index: number) => {\n    setAttachments(prev => prev.filter((_, i) => i !== index))\n  }\n\n  const formatTimestamp = (timestamp: string) => {\n    const date = new Date(timestamp)\n    const now = new Date()\n    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60)\n    \n    if (diffInHours < 1) {\n      return 'Just now'\n    } else if (diffInHours < 24) {\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\n    } else if (diffInHours < 48) {\n      return 'Yesterday'\n    } else {\n      return date.toLocaleDateString()\n    }\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'online': return 'text-green-500'\n      case 'away': return 'text-yellow-500'\n      case 'offline': return 'text-gray-400'\n      default: return 'text-gray-400'\n    }\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'online': return 'ðŸŸ¢'\n      case 'away': return 'ðŸŸ¡'\n      case 'offline': return 'âš«'\n      default: return 'âš«'\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className={`bg-white rounded-lg shadow ${className}`}>\n        <div className=\"p-6 text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-500\">Loading messages...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className={`bg-white rounded-lg shadow flex flex-col ${className}`}>\n      {/* Header */}\n      <div className=\"px-6 py-4 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"relative\">\n              <div className=\"w-10 h-10 bg-primary-100 rounded-full flex items-center justify-center\">\n                <span className=\"text-primary-600 font-medium\">\n                  {otherParticipant?.name.charAt(0).toUpperCase()}\n                </span>\n              </div>\n              {otherParticipant && (\n                <div className={`absolute -bottom-1 -right-1 w-3 h-3 rounded-full border-2 border-white ${\n                  otherParticipant.status === 'online' ? 'bg-green-500' :\n                  otherParticipant.status === 'away' ? 'bg-yellow-500' : 'bg-gray-400'\n                }`}></div>\n              )}\n            </div>\n            \n            <div>\n              <h3 className=\"text-lg font-medium text-gray-900\">\n                {otherParticipant?.name || 'Conversation'}\n              </h3>\n              <p className={`text-sm ${getStatusColor(otherParticipant?.status || 'offline')}`}>\n                {getStatusIcon(otherParticipant?.status || 'offline')} \n                {otherParticipant?.status === 'online' ? 'Online' :\n                 otherParticipant?.status === 'away' ? 'Away' :\n                 otherParticipant?.lastSeen ? `Last seen ${formatTimestamp(otherParticipant.lastSeen)}` : 'Offline'}\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button\n              onClick={() => {\n                // Handle video call\n                console.log('Start video call')\n              }}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z\" />\n              </svg>\n            </Button>\n            \n            <Button\n              onClick={() => {\n                // Handle phone call\n                window.open(`tel:${otherParticipant?.email}`, '_self')\n              }}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\" />\n              </svg>\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Messages */}\n      <div className=\"flex-1 overflow-y-auto p-6 space-y-4 max-h-96\">\n        {messages.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <div className=\"text-gray-400 mb-2\">\n              <svg className=\"w-12 h-12 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\" />\n              </svg>\n            </div>\n            <h3 className=\"text-sm font-medium text-gray-900 mb-1\">No messages yet</h3>\n            <p className=\"text-sm text-gray-500\">\n              Start a conversation with {otherParticipant?.name || 'your contact'}\n            </p>\n          </div>\n        ) : (\n          messages.map((message, index) => {\n            const isCurrentUser = message.from === currentUserRole\n            const showAvatar = index === 0 || messages[index - 1].from !== message.from\n            \n            return (\n              <div\n                key={message.id}\n                className={`flex ${isCurrentUser ? 'justify-end' : 'justify-start'}`}\n              >\n                <div className={`flex items-end space-x-2 max-w-xs lg:max-w-md ${\n                  isCurrentUser ? 'flex-row-reverse space-x-reverse' : ''\n                }`}>\n                  {/* Avatar */}\n                  {showAvatar && !isCurrentUser && (\n                    <div className=\"w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center flex-shrink-0\">\n                      <span className=\"text-gray-600 text-xs font-medium\">\n                        {message.fromName.charAt(0).toUpperCase()}\n                      </span>\n                    </div>\n                  )}\n                  \n                  {/* Message bubble */}\n                  <div className={`px-4 py-2 rounded-lg ${\n                    message.type === 'system_notification'\n                      ? 'bg-blue-50 text-blue-800 border border-blue-200'\n                      : isCurrentUser\n                      ? 'bg-primary-600 text-white'\n                      : 'bg-gray-100 text-gray-900'\n                  }`}>\n                    {/* Message content */}\n                    {message.message && (\n                      <p className=\"text-sm whitespace-pre-wrap\">{message.message}</p>\n                    )}\n                    \n                    {/* Attachments */}\n                    {message.attachments && message.attachments.length > 0 && (\n                      <div className=\"mt-2 space-y-2\">\n                        {message.attachments.map((attachment) => (\n                          <div\n                            key={attachment.id}\n                            className={`flex items-center space-x-2 p-2 rounded border ${\n                              isCurrentUser ? 'bg-primary-500 border-primary-400' : 'bg-white border-gray-200'\n                            }`}\n                          >\n                            <div className=\"flex-shrink-0\">\n                              {attachment.type.startsWith('image/') ? (\n                                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n                                </svg>\n                              ) : (\n                                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                                </svg>\n                              )}\n                            </div>\n                            <div className=\"flex-1 min-w-0\">\n                              <p className=\"text-xs font-medium truncate\">{attachment.name}</p>\n                              <p className=\"text-xs opacity-75\">\n                                {(attachment.size / 1024).toFixed(1)} KB\n                              </p>\n                            </div>\n                            <a\n                              href={attachment.url}\n                              download={attachment.name}\n                              className=\"flex-shrink-0 text-xs underline\"\n                            >\n                              Download\n                            </a>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                    \n                    {/* Timestamp */}\n                    <p className={`text-xs mt-1 ${\n                      message.type === 'system_notification'\n                        ? 'text-blue-600'\n                        : isCurrentUser\n                        ? 'text-primary-100'\n                        : 'text-gray-500'\n                    }`}>\n                      {formatTimestamp(message.timestamp)}\n                      {isCurrentUser && (\n                        <span className=\"ml-1\">\n                          {message.read ? 'âœ“âœ“' : 'âœ“'}\n                        </span>\n                      )}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            )\n          })\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* Attachments Preview */}\n      {attachments.length > 0 && (\n        <div className=\"px-6 py-3 border-t border-gray-100 bg-gray-50\">\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm text-gray-600\">Attachments:</span>\n            <div className=\"flex space-x-2\">\n              {attachments.map((file, index) => (\n                <div key={index} className=\"flex items-center space-x-1 bg-white px-2 py-1 rounded border\">\n                  <span className=\"text-xs text-gray-700 truncate max-w-20\">{file.name}</span>\n                  <button\n                    onClick={() => removeAttachment(index)}\n                    className=\"text-gray-400 hover:text-gray-600\"\n                  >\n                    <svg className=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                    </svg>\n                  </button>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Message Input */}\n      <div className=\"px-6 py-4 border-t border-gray-200\">\n        <div className=\"flex items-end space-x-3\">\n          <div className=\"flex-1\">\n            <textarea\n              value={newMessage}\n              onChange={(e) => setNewMessage(e.target.value)}\n              onKeyPress={(e) => {\n                if (e.key === 'Enter' && !e.shiftKey) {\n                  e.preventDefault()\n                  handleSendMessage()\n                }\n              }}\n              placeholder=\"Type your message...\"\n              rows={1}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md resize-none focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500\"\n              disabled={sending}\n            />\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            {/* File attachment */}\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              multiple\n              onChange={handleFileSelect}\n              className=\"hidden\"\n              accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png,.gif\"\n            />\n            <Button\n              onClick={() => fileInputRef.current?.click()}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13\" />\n              </svg>\n            </Button>\n            \n            {/* Emoji picker */}\n            <Button\n              onClick={() => setShowEmojiPicker(!showEmojiPicker)}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              ðŸ˜Š\n            </Button>\n            \n            {/* Send button */}\n            <Button\n              onClick={handleSendMessage}\n              disabled={(!newMessage.trim() && attachments.length === 0) || sending}\n              variant=\"primary\"\n              size=\"sm\"\n            >\n              {sending ? (\n                <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent\" />\n              ) : (\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 19l9 2-9-18-9 18 9-2zm0 0v-8\" />\n                </svg>\n              )}\n            </Button>\n          </div>\n        </div>\n        \n        {/* Quick responses */}\n        <div className=\"mt-2 flex flex-wrap gap-2\">\n          {[\n            'Thanks!',\n            'Looks good',\n            'I\\'ll get that to you today',\n            'Can you clarify?',\n            'Let me check'\n          ].map((quickResponse) => (\n            <button\n              key={quickResponse}\n              onClick={() => setNewMessage(quickResponse)}\n              className=\"px-2 py-1 text-xs bg-gray-100 text-gray-700 rounded hover:bg-gray-200 transition-colors\"\n            >\n              {quickResponse}\n            </button>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n"