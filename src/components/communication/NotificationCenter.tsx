'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Button } from '@/components/ui/Button'\nimport { StatusBadge } from '@/components/ui/StatusBadge'\nimport { logger } from '@/lib/logger'\n\ninterface Notification {\n  id: string\n  type: 'info' | 'success' | 'warning' | 'error' | 'receipt_uploaded' | 'report_ready' | 'missing_receipt' | 'message_received'\n  title: string\n  message: string\n  timestamp: string\n  read: boolean\n  priority: 'low' | 'medium' | 'high' | 'urgent'\n  actionUrl?: string\n  actionText?: string\n  metadata?: {\n    receiptId?: string\n    reportId?: string\n    messageId?: string\n    amount?: number\n    daysOverdue?: number\n  }\n}\n\ninterface NotificationCenterProps {\n  userId: string\n  userRole: 'client' | 'accountant'\n  onNotificationClick?: (notification: Notification) => void\n  onMarkAsRead?: (notificationIds: string[]) => Promise<void>\n  onMarkAllAsRead?: () => Promise<void>\n  className?: string\n}\n\nexport function NotificationCenter({\n  userId,\n  userRole,\n  onNotificationClick,\n  onMarkAsRead,\n  onMarkAllAsRead,\n  className\n}: NotificationCenterProps) {\n  const [notifications, setNotifications] = useState<Notification[]>([])\n  const [loading, setLoading] = useState(true)\n  const [filter, setFilter] = useState<'all' | 'unread' | 'urgent'>('all')\n  const [isOpen, setIsOpen] = useState(false)\n\n  useEffect(() => {\n    loadNotifications()\n    \n    // Set up polling for new notifications\n    const interval = setInterval(loadNotifications, 30000) // Poll every 30 seconds\n    \n    return () => clearInterval(interval)\n  }, [userId])\n\n  const loadNotifications = async () => {\n    try {\n      const response = await fetch(`/api/notifications?userId=${userId}&limit=50`)\n      \n      if (response.ok) {\n        const data = await response.json()\n        setNotifications(data.notifications || [])\n      } else {\n        logger.error('Failed to load notifications', new Error(`HTTP ${response.status}`))\n      }\n    } catch (error) {\n      logger.error('Error loading notifications', error as Error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleNotificationClick = async (notification: Notification) => {\n    // Mark as read if not already read\n    if (!notification.read && onMarkAsRead) {\n      await onMarkAsRead([notification.id])\n      setNotifications(prev => \n        prev.map(n => n.id === notification.id ? { ...n, read: true } : n)\n      )\n    }\n\n    // Handle click action\n    if (onNotificationClick) {\n      onNotificationClick(notification)\n    } else if (notification.actionUrl) {\n      window.open(notification.actionUrl, '_blank')\n    }\n  }\n\n  const handleMarkAllAsRead = async () => {\n    if (onMarkAllAsRead) {\n      await onMarkAllAsRead()\n      setNotifications(prev => prev.map(n => ({ ...n, read: true })))\n    }\n  }\n\n  const filteredNotifications = notifications.filter(notification => {\n    switch (filter) {\n      case 'unread':\n        return !notification.read\n      case 'urgent':\n        return notification.priority === 'urgent' || notification.priority === 'high'\n      default:\n        return true\n    }\n  })\n\n  const unreadCount = notifications.filter(n => !n.read).length\n  const urgentCount = notifications.filter(n => \n    !n.read && (n.priority === 'urgent' || n.priority === 'high')\n  ).length\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case 'receipt_uploaded':\n        return '📄'\n      case 'report_ready':\n        return '📊'\n      case 'missing_receipt':\n        return '⚠️'\n      case 'message_received':\n        return '💬'\n      case 'success':\n        return '✅'\n      case 'warning':\n        return '⚠️'\n      case 'error':\n        return '❌'\n      case 'info':\n      default:\n        return 'ℹ️'\n    }\n  }\n\n  const getNotificationColor = (type: string, priority: string) => {\n    if (priority === 'urgent') return 'border-red-500 bg-red-50'\n    if (priority === 'high') return 'border-orange-500 bg-orange-50'\n    \n    switch (type) {\n      case 'success':\n      case 'receipt_uploaded':\n      case 'report_ready':\n        return 'border-green-500 bg-green-50'\n      case 'warning':\n      case 'missing_receipt':\n        return 'border-yellow-500 bg-yellow-50'\n      case 'error':\n        return 'border-red-500 bg-red-50'\n      case 'message_received':\n        return 'border-blue-500 bg-blue-50'\n      case 'info':\n      default:\n        return 'border-gray-500 bg-gray-50'\n    }\n  }\n\n  const formatTimestamp = (timestamp: string) => {\n    const date = new Date(timestamp)\n    const now = new Date()\n    const diffInMinutes = (now.getTime() - date.getTime()) / (1000 * 60)\n    \n    if (diffInMinutes < 1) {\n      return 'Just now'\n    } else if (diffInMinutes < 60) {\n      return `${Math.floor(diffInMinutes)}m ago`\n    } else if (diffInMinutes < 1440) {\n      return `${Math.floor(diffInMinutes / 60)}h ago`\n    } else {\n      return date.toLocaleDateString()\n    }\n  }\n\n  return (\n    <div className={`relative ${className}`}>\n      {/* Notification Bell */}\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"relative p-2 text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 rounded-full\"\n      >\n        <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 17h5l-3.5-3.5a8.38 8.38 0 010-11.8L20 2H15m-6 15v2a3 3 0 11-6 0v-2m6 0H9m0 0H3m6 0v-2a9 9 0 1118 0v2M9 17h6\" />\n        </svg>\n        \n        {/* Notification Badge */}\n        {unreadCount > 0 && (\n          <div className=\"absolute -top-1 -right-1 flex items-center justify-center\">\n            <div className={`px-1.5 py-0.5 text-xs font-medium text-white rounded-full min-w-[1.25rem] h-5 ${\n              urgentCount > 0 ? 'bg-red-500' : 'bg-primary-600'\n            }`}>\n              {unreadCount > 99 ? '99+' : unreadCount}\n            </div>\n          </div>\n        )}\n      </button>\n\n      {/* Notification Panel */}\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <div \n            className=\"fixed inset-0 z-40\" \n            onClick={() => setIsOpen(false)}\n          />\n          \n          {/* Panel */}\n          <div className=\"absolute right-0 mt-2 w-96 bg-white rounded-lg shadow-lg border border-gray-200 z-50 max-h-96 flex flex-col\">\n            {/* Header */}\n            <div className=\"px-4 py-3 border-b border-gray-200\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-medium text-gray-900\">Notifications</h3>\n                <div className=\"flex items-center space-x-2\">\n                  {unreadCount > 0 && (\n                    <Button\n                      onClick={handleMarkAllAsRead}\n                      variant=\"ghost\"\n                      size=\"xs\"\n                      className=\"text-primary-600 hover:text-primary-700\"\n                    >\n                      Mark all read\n                    </Button>\n                  )}\n                  <button\n                    onClick={() => setIsOpen(false)}\n                    className=\"text-gray-400 hover:text-gray-600\"\n                  >\n                    <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                    </svg>\n                  </button>\n                </div>\n              </div>\n              \n              {/* Filter Tabs */}\n              <div className=\"flex space-x-1 mt-3\">\n                {[\n                  { key: 'all', label: 'All', count: notifications.length },\n                  { key: 'unread', label: 'Unread', count: unreadCount },\n                  { key: 'urgent', label: 'Urgent', count: urgentCount }\n                ].map((tab) => (\n                  <button\n                    key={tab.key}\n                    onClick={() => setFilter(tab.key as any)}\n                    className={`px-3 py-1 text-sm rounded-full transition-colors ${\n                      filter === tab.key\n                        ? 'bg-primary-100 text-primary-700'\n                        : 'text-gray-500 hover:text-gray-700 hover:bg-gray-100'\n                    }`}\n                  >\n                    {tab.label}\n                    {tab.count > 0 && (\n                      <span className={`ml-1 px-1.5 py-0.5 text-xs rounded-full ${\n                        filter === tab.key\n                          ? 'bg-primary-200 text-primary-800'\n                          : 'bg-gray-200 text-gray-600'\n                      }`}>\n                        {tab.count}\n                      </span>\n                    )}\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Notifications List */}\n            <div className=\"flex-1 overflow-y-auto\">\n              {loading ? (\n                <div className=\"p-4 text-center\">\n                  <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary-600 mx-auto mb-2\"></div>\n                  <p className=\"text-sm text-gray-500\">Loading notifications...</p>\n                </div>\n              ) : filteredNotifications.length === 0 ? (\n                <div className=\"p-4 text-center\">\n                  <div className=\"text-gray-400 mb-2\">\n                    <svg className=\"w-8 h-8 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 17h5l-3.5-3.5a8.38 8.38 0 010-11.8L20 2H15m-6 15v2a3 3 0 11-6 0v-2m6 0H9m0 0H3m6 0v-2a9 9 0 1118 0v2M9 17h6\" />\n                    </svg>\n                  </div>\n                  <p className=\"text-sm text-gray-500\">\n                    {filter === 'unread' ? 'No unread notifications' :\n                     filter === 'urgent' ? 'No urgent notifications' :\n                     'No notifications yet'}\n                  </p>\n                </div>\n              ) : (\n                <div className=\"divide-y divide-gray-100\">\n                  {filteredNotifications.map((notification) => (\n                    <div\n                      key={notification.id}\n                      onClick={() => handleNotificationClick(notification)}\n                      className={`p-4 hover:bg-gray-50 cursor-pointer transition-colors ${\n                        !notification.read ? 'bg-blue-50' : ''\n                      }`}\n                    >\n                      <div className=\"flex items-start space-x-3\">\n                        {/* Icon */}\n                        <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center border-2 ${\n                          getNotificationColor(notification.type, notification.priority)\n                        }`}>\n                          <span className=\"text-sm\">\n                            {getNotificationIcon(notification.type)}\n                          </span>\n                        </div>\n                        \n                        {/* Content */}\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <p className={`text-sm font-medium ${\n                                !notification.read ? 'text-gray-900' : 'text-gray-700'\n                              }`}>\n                                {notification.title}\n                              </p>\n                              <p className={`text-sm mt-1 ${\n                                !notification.read ? 'text-gray-700' : 'text-gray-500'\n                              }`}>\n                                {notification.message}\n                              </p>\n                              \n                              {/* Metadata */}\n                              {notification.metadata && (\n                                <div className=\"mt-2 flex items-center space-x-4 text-xs text-gray-500\">\n                                  {notification.metadata.amount && (\n                                    <span>Amount: ${notification.metadata.amount.toFixed(2)}</span>\n                                  )}\n                                  {notification.metadata.daysOverdue && (\n                                    <span className=\"text-red-600\">\n                                      {notification.metadata.daysOverdue} days overdue\n                                    </span>\n                                  )}\n                                </div>\n                              )}\n                            </div>\n                            \n                            {/* Priority Badge */}\n                            {(notification.priority === 'urgent' || notification.priority === 'high') && (\n                              <StatusBadge\n                                status={notification.priority === 'urgent' ? 'error' : 'warning'}\n                                size=\"xs\"\n                              />\n                            )}\n                          </div>\n                          \n                          <div className=\"flex items-center justify-between mt-2\">\n                            <span className=\"text-xs text-gray-500\">\n                              {formatTimestamp(notification.timestamp)}\n                            </span>\n                            \n                            {/* Action Button */}\n                            {notification.actionText && (\n                              <Button\n                                variant=\"ghost\"\n                                size=\"xs\"\n                                className=\"text-primary-600 hover:text-primary-700\"\n                              >\n                                {notification.actionText}\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                        \n                        {/* Unread Indicator */}\n                        {!notification.read && (\n                          <div className=\"flex-shrink-0 w-2 h-2 bg-primary-600 rounded-full\"></div>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n            \n            {/* Footer */}\n            {filteredNotifications.length > 0 && (\n              <div className=\"px-4 py-3 border-t border-gray-200 text-center\">\n                <Button\n                  onClick={() => {\n                    // Navigate to full notifications page\n                    window.location.href = '/notifications'\n                  }}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-primary-600 hover:text-primary-700\"\n                >\n                  View all notifications\n                </Button>\n              </div>\n            )}\n          </div>\n        </>\n      )}\n    </div>\n  )\n}\n\n// Notification Toast Component for real-time notifications\nexport function NotificationToast({\n  notification,\n  onClose,\n  onAction\n}: {\n  notification: Notification\n  onClose: () => void\n  onAction?: () => void\n}) {\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      onClose()\n    }, 5000) // Auto-close after 5 seconds\n    \n    return () => clearTimeout(timer)\n  }, [onClose])\n\n  const getToastColor = (type: string, priority: string) => {\n    if (priority === 'urgent') return 'border-red-500 bg-red-50 text-red-800'\n    if (priority === 'high') return 'border-orange-500 bg-orange-50 text-orange-800'\n    \n    switch (type) {\n      case 'success':\n        return 'border-green-500 bg-green-50 text-green-800'\n      case 'warning':\n        return 'border-yellow-500 bg-yellow-50 text-yellow-800'\n      case 'error':\n        return 'border-red-500 bg-red-50 text-red-800'\n      case 'info':\n      default:\n        return 'border-blue-500 bg-blue-50 text-blue-800'\n    }\n  }\n\n  return (\n    <div className={`fixed top-4 right-4 z-50 max-w-sm w-full bg-white rounded-lg shadow-lg border-l-4 ${\n      getToastColor(notification.type, notification.priority)\n    }`}>\n      <div className=\"p-4\">\n        <div className=\"flex items-start\">\n          <div className=\"flex-shrink-0\">\n            <span className=\"text-lg\">\n              {getNotificationIcon(notification.type)}\n            </span>\n          </div>\n          \n          <div className=\"ml-3 flex-1\">\n            <p className=\"text-sm font-medium\">\n              {notification.title}\n            </p>\n            <p className=\"text-sm mt-1 opacity-90\">\n              {notification.message}\n            </p>\n            \n            {notification.actionText && (\n              <div className=\"mt-3\">\n                <Button\n                  onClick={onAction}\n                  variant=\"ghost\"\n                  size=\"xs\"\n                  className=\"text-current hover:bg-black hover:bg-opacity-10\"\n                >\n                  {notification.actionText}\n                </Button>\n              </div>\n            )}\n          </div>\n          \n          <div className=\"ml-4 flex-shrink-0\">\n            <button\n              onClick={onClose}\n              className=\"text-current opacity-50 hover:opacity-75\"\n            >\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n"