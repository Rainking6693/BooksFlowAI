'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Button } from '@/components/ui/Button'\nimport { StatusBadge } from '@/components/ui/StatusBadge'\nimport { logger } from '@/lib/logger'\n\ninterface AuditEntry {\n  id: string\n  event_id: string\n  event_type: string\n  event_category: string\n  event_timestamp: string\n  user_id: string\n  user_type: 'client' | 'accountant'\n  user_role: string\n  ip_address: string\n  entity_type: string\n  entity_id: string | null\n  entity_name: string | null\n  action_performed: string\n  old_values: any\n  new_values: any\n  change_summary: string\n  compliance_framework: string[]\n  risk_level: 'low' | 'medium' | 'high' | 'critical'\n  requires_approval: boolean\n  approval_status: 'not_required' | 'pending' | 'approved' | 'rejected'\n  approved_by: string | null\n  approved_at: string | null\n  data_hash: string\n  metadata: any\n}\n\ninterface AuditSummary {\n  total_entries: number\n  high_risk_entries: number\n  pending_approvals: number\n  event_type_breakdown: Record<string, number>\n  risk_level_breakdown: Record<string, number>\n}\n\ninterface AuditTrailViewerProps {\n  userId: string\n  userRole: 'client' | 'accountant' | 'admin'\n  className?: string\n}\n\nexport function AuditTrailViewer({\n  userId,\n  userRole,\n  className\n}: AuditTrailViewerProps) {\n  const [auditEntries, setAuditEntries] = useState<AuditEntry[]>([])\n  const [summary, setSummary] = useState<AuditSummary | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [filters, setFilters] = useState({\n    startDate: '',\n    endDate: '',\n    eventType: '',\n    entityType: '',\n    riskLevel: '',\n    userId: ''\n  })\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 50,\n    total: 0,\n    total_pages: 0\n  })\n  const [selectedEntry, setSelectedEntry] = useState<AuditEntry | null>(null)\n  const [showDetails, setShowDetails] = useState(false)\n\n  useEffect(() => {\n    loadAuditTrail()\n  }, [userId, filters, pagination.page])\n\n  const loadAuditTrail = async () => {\n    try {\n      setError(null)\n      \n      const params = new URLSearchParams({\n        userId,\n        userRole,\n        page: pagination.page.toString(),\n        limit: pagination.limit.toString(),\n        ...Object.fromEntries(\n          Object.entries(filters).filter(([_, value]) => value !== '')\n        )\n      })\n      \n      const response = await fetch(`/api/compliance/audit-trail?${params}`)\n      \n      if (!response.ok) {\n        throw new Error(`Failed to load audit trail: ${response.status}`)\n      }\n      \n      const data = await response.json()\n      setAuditEntries(data.audit_entries)\n      setSummary(data.summary)\n      setPagination(prev => ({\n        ...prev,\n        total: data.pagination.total,\n        total_pages: data.pagination.total_pages\n      }))\n      \n    } catch (error) {\n      logger.error('Error loading audit trail', error as Error)\n      setError('Failed to load audit trail. Please try again.')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleFilterChange = (key: string, value: string) => {\n    setFilters(prev => ({ ...prev, [key]: value }))\n    setPagination(prev => ({ ...prev, page: 1 })) // Reset to first page\n  }\n\n  const handlePageChange = (newPage: number) => {\n    setPagination(prev => ({ ...prev, page: newPage }))\n  }\n\n  const handleExport = async (format: 'pdf' | 'excel' | 'csv') => {\n    try {\n      const params = new URLSearchParams({\n        userId,\n        userRole,\n        format,\n        ...Object.fromEntries(\n          Object.entries(filters).filter(([_, value]) => value !== '')\n        )\n      })\n      \n      const response = await fetch(`/api/compliance/audit-trail/export?${params}`)\n      \n      if (response.ok) {\n        const blob = await response.blob()\n        const url = window.URL.createObjectURL(blob)\n        const a = document.createElement('a')\n        a.href = url\n        a.download = `audit-trail-${new Date().toISOString().split('T')[0]}.${format}`\n        document.body.appendChild(a)\n        a.click()\n        window.URL.revokeObjectURL(url)\n        document.body.removeChild(a)\n      }\n    } catch (error) {\n      logger.error('Error exporting audit trail', error as Error)\n    }\n  }\n\n  const getRiskLevelColor = (riskLevel: string) => {\n    switch (riskLevel) {\n      case 'critical': return 'text-red-600 bg-red-50'\n      case 'high': return 'text-orange-600 bg-orange-50'\n      case 'medium': return 'text-yellow-600 bg-yellow-50'\n      case 'low': return 'text-green-600 bg-green-50'\n      default: return 'text-gray-600 bg-gray-50'\n    }\n  }\n\n  const getEventTypeIcon = (eventType: string) => {\n    switch (eventType) {\n      case 'user_login': return 'üîê'\n      case 'user_logout': return 'üö™'\n      case 'data_create': return '‚ûï'\n      case 'data_update': return '‚úèÔ∏è'\n      case 'data_delete': return 'üóëÔ∏è'\n      case 'data_export': return 'üì§'\n      case 'report_generate': return 'üìä'\n      case 'system_config': return '‚öôÔ∏è'\n      case 'permission_change': return 'üîë'\n      case 'backup_create': return 'üíæ'\n      case 'compliance_check': return '‚úÖ'\n      default: return 'üìã'\n    }\n  }\n\n  const formatTimestamp = (timestamp: string) => {\n    return new Date(timestamp).toLocaleString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    })\n  }\n\n  if (loading) {\n    return (\n      <div className={`bg-white rounded-lg shadow ${className}`}>\n        <div className=\"p-8 text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading audit trail...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className={`bg-white rounded-lg shadow ${className}`}>\n        <div className=\"p-8 text-center\">\n          <div className=\"text-red-500 mb-4\">\n            <svg className=\"w-16 h-16 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n          </div>\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Unable to Load Audit Trail</h2>\n          <p className=\"text-gray-600 mb-4\">{error}</p>\n          <Button onClick={loadAuditTrail} variant=\"primary\">\n            Try Again\n          </Button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Summary Cards */}\n      {summary && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div className=\"bg-white rounded-lg shadow p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Total Entries</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {summary.total_entries.toLocaleString()}\n                </p>\n              </div>\n              <div className=\"text-2xl\">üìã</div>\n            </div>\n          </div>\n          \n          <div className=\"bg-white rounded-lg shadow p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">High Risk Events</p>\n                <p className={`text-2xl font-bold ${\n                  summary.high_risk_entries > 0 ? 'text-red-600' : 'text-green-600'\n                }`}>\n                  {summary.high_risk_entries}\n                </p>\n              </div>\n              <div className=\"text-2xl\">‚ö†Ô∏è</div>\n            </div>\n          </div>\n          \n          <div className=\"bg-white rounded-lg shadow p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Pending Approvals</p>\n                <p className={`text-2xl font-bold ${\n                  summary.pending_approvals > 0 ? 'text-yellow-600' : 'text-green-600'\n                }`}>\n                  {summary.pending_approvals}\n                </p>\n              </div>\n              <div className=\"text-2xl\">‚è≥</div>\n            </div>\n          </div>\n          \n          <div className=\"bg-white rounded-lg shadow p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Event Types</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {Object.keys(summary.event_type_breakdown).length}\n                </p>\n              </div>\n              <div className=\"text-2xl\">üè∑Ô∏è</div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Filters */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Filters</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Start Date\n            </label>\n            <input\n              type=\"date\"\n              value={filters.startDate}\n              onChange={(e) => handleFilterChange('startDate', e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              End Date\n            </label>\n            <input\n              type=\"date\"\n              value={filters.endDate}\n              onChange={(e) => handleFilterChange('endDate', e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Event Type\n            </label>\n            <select\n              value={filters.eventType}\n              onChange={(e) => handleFilterChange('eventType', e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500\"\n            >\n              <option value=\"\">All Types</option>\n              <option value=\"user_login\">User Login</option>\n              <option value=\"data_create\">Data Create</option>\n              <option value=\"data_update\">Data Update</option>\n              <option value=\"data_delete\">Data Delete</option>\n              <option value=\"data_export\">Data Export</option>\n              <option value=\"report_generate\">Report Generate</option>\n              <option value=\"compliance_check\">Compliance Check</option>\n            </select>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Entity Type\n            </label>\n            <select\n              value={filters.entityType}\n              onChange={(e) => handleFilterChange('entityType', e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500\"\n            >\n              <option value=\"\">All Entities</option>\n              <option value=\"transaction\">Transaction</option>\n              <option value=\"receipt\">Receipt</option>\n              <option value=\"client\">Client</option>\n              <option value=\"report\">Report</option>\n              <option value=\"user\">User</option>\n            </select>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Risk Level\n            </label>\n            <select\n              value={filters.riskLevel}\n              onChange={(e) => handleFilterChange('riskLevel', e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500\"\n            >\n              <option value=\"\">All Levels</option>\n              <option value=\"low\">Low</option>\n              <option value=\"medium\">Medium</option>\n              <option value=\"high\">High</option>\n              <option value=\"critical\">Critical</option>\n            </select>\n          </div>\n          \n          <div className=\"flex items-end\">\n            <Button\n              onClick={() => {\n                setFilters({\n                  startDate: '',\n                  endDate: '',\n                  eventType: '',\n                  entityType: '',\n                  riskLevel: '',\n                  userId: ''\n                })\n              }}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"w-full\"\n            >\n              Clear Filters\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Audit Trail Table */}\n      <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n        <div className=\"px-6 py-4 border-b border-gray-200 flex items-center justify-between\">\n          <h3 className=\"text-lg font-medium text-gray-900\">Audit Trail Entries</h3>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              onClick={() => handleExport('csv')}\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              Export CSV\n            </Button>\n            <Button\n              onClick={() => handleExport('excel')}\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              Export Excel\n            </Button>\n            <Button\n              onClick={() => handleExport('pdf')}\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              Export PDF\n            </Button>\n          </div>\n        </div>\n        \n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Timestamp\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Event\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  User\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Entity\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Risk Level\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Status\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {auditEntries.map((entry) => (\n                <tr key={entry.id} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {formatTimestamp(entry.event_timestamp)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-lg\">{getEventTypeIcon(entry.event_type)}</span>\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-900\">\n                          {entry.event_type.replace('_', ' ').toUpperCase()}\n                        </p>\n                        <p className=\"text-sm text-gray-500\">\n                          {entry.action_performed}\n                        </p>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900\">\n                        {entry.user_role}\n                      </p>\n                      <p className=\"text-sm text-gray-500\">\n                        {entry.user_type}\n                      </p>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900\">\n                        {entry.entity_type}\n                      </p>\n                      {entry.entity_name && (\n                        <p className=\"text-sm text-gray-500\">\n                          {entry.entity_name}\n                        </p>\n                      )}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${\n                      getRiskLevelColor(entry.risk_level)\n                    }`}>\n                      {entry.risk_level.toUpperCase()}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    {entry.requires_approval ? (\n                      <StatusBadge\n                        status={entry.approval_status === 'approved' ? 'approved' : \n                               entry.approval_status === 'rejected' ? 'error' : 'pending'}\n                        size=\"sm\"\n                      >\n                        {entry.approval_status}\n                      </StatusBadge>\n                    ) : (\n                      <StatusBadge status=\"approved\" size=\"sm\">\n                        Complete\n                      </StatusBadge>\n                    )}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                    <Button\n                      onClick={() => {\n                        setSelectedEntry(entry)\n                        setShowDetails(true)\n                      }}\n                      variant=\"ghost\"\n                      size=\"xs\"\n                    >\n                      View Details\n                    </Button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        \n        {/* Pagination */}\n        <div className=\"px-6 py-4 border-t border-gray-200 flex items-center justify-between\">\n          <div className=\"text-sm text-gray-700\">\n            Showing {((pagination.page - 1) * pagination.limit) + 1} to {Math.min(pagination.page * pagination.limit, pagination.total)} of {pagination.total} entries\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              onClick={() => handlePageChange(pagination.page - 1)}\n              disabled={pagination.page <= 1}\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              Previous\n            </Button>\n            <span className=\"text-sm text-gray-700\">\n              Page {pagination.page} of {pagination.total_pages}\n            </span>\n            <Button\n              onClick={() => handlePageChange(pagination.page + 1)}\n              disabled={pagination.page >= pagination.total_pages}\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Details Modal */}\n      {showDetails && selectedEntry && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"px-6 py-4 border-b border-gray-200 flex items-center justify-between\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Audit Entry Details</h3>\n              <Button\n                onClick={() => setShowDetails(false)}\n                variant=\"ghost\"\n                size=\"sm\"\n              >\n                ‚úï\n              </Button>\n            </div>\n            \n            <div className=\"p-6 space-y-6\">\n              {/* Basic Information */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">Event ID</label>\n                  <p className=\"text-sm text-gray-900 font-mono\">{selectedEntry.event_id}</p>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">Timestamp</label>\n                  <p className=\"text-sm text-gray-900\">{formatTimestamp(selectedEntry.event_timestamp)}</p>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">Event Type</label>\n                  <p className=\"text-sm text-gray-900\">{selectedEntry.event_type}</p>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">Risk Level</label>\n                  <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${\n                    getRiskLevelColor(selectedEntry.risk_level)\n                  }`}>\n                    {selectedEntry.risk_level.toUpperCase()}\n                  </span>\n                </div>\n              </div>\n              \n              {/* Change Summary */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Change Summary</label>\n                <p className=\"text-sm text-gray-900 bg-gray-50 p-3 rounded-md\">\n                  {selectedEntry.change_summary}\n                </p>\n              </div>\n              \n              {/* Data Changes */}\n              {(selectedEntry.old_values || selectedEntry.new_values) && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {selectedEntry.old_values && (\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">Previous Values</label>\n                      <pre className=\"text-xs text-gray-900 bg-red-50 p-3 rounded-md overflow-x-auto\">\n                        {JSON.stringify(selectedEntry.old_values, null, 2)}\n                      </pre>\n                    </div>\n                  )}\n                  {selectedEntry.new_values && (\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">New Values</label>\n                      <pre className=\"text-xs text-gray-900 bg-green-50 p-3 rounded-md overflow-x-auto\">\n                        {JSON.stringify(selectedEntry.new_values, null, 2)}\n                      </pre>\n                    </div>\n                  )}\n                </div>\n              )}\n              \n              {/* Compliance Information */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">Compliance Frameworks</label>\n                  <div className=\"flex flex-wrap gap-1 mt-1\">\n                    {selectedEntry.compliance_framework.map((framework, index) => (\n                      <span\n                        key={index}\n                        className=\"inline-flex px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded-full\"\n                      >\n                        {framework.toUpperCase()}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">Data Hash</label>\n                  <p className=\"text-xs text-gray-900 font-mono break-all\">{selectedEntry.data_hash}</p>\n                </div>\n              </div>\n              \n              {/* Metadata */}\n              {selectedEntry.metadata && Object.keys(selectedEntry.metadata).length > 0 && (\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Metadata</label>\n                  <pre className=\"text-xs text-gray-900 bg-gray-50 p-3 rounded-md overflow-x-auto\">\n                    {JSON.stringify(selectedEntry.metadata, null, 2)}\n                  </pre>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n"