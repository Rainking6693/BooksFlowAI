'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Button } from '@/components/ui/Button'\nimport { StatusBadge } from '@/components/ui/StatusBadge'\nimport { PerformanceChart } from './PerformanceChart'\nimport { SystemStatus } from './SystemStatus'\nimport { EndpointMetrics } from './EndpointMetrics'\nimport { AlertsPanel } from './AlertsPanel'\nimport { logger } from '@/lib/logger'\n\ninterface PerformanceMetrics {\n  summary: {\n    totalRequests: number\n    averageResponseTime: number\n    p95ResponseTime: number\n    p99ResponseTime: number\n    errorRate: number\n    successRate: number\n  }\n  endpoints: Array<{\n    endpoint: string\n    method: string\n    requests: number\n    averageResponseTime: number\n    errorRate: number\n  }>\n  trends: Array<{\n    timestamp: string\n    requests: number\n    averageResponseTime: number\n    errorRate: number\n  }>\n  systemStatus: {\n    status: 'healthy' | 'degraded' | 'unhealthy' | 'unknown'\n    message: string\n    metrics?: {\n      averageResponseTime: number\n      errorRate: number\n      totalRequests: number\n    }\n  }\n}\n\ninterface PerformanceDashboardProps {\n  userRole: 'admin' | 'developer' | 'viewer'\n  className?: string\n}\n\nexport function PerformanceDashboard({\n  userRole,\n  className\n}: PerformanceDashboardProps) {\n  const [performanceData, setPerformanceData] = useState<PerformanceMetrics | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [timeRange, setTimeRange] = useState<'1h' | '24h' | '7d' | '30d'>('1h')\n  const [activeTab, setActiveTab] = useState<'overview' | 'endpoints' | 'trends' | 'alerts'>('overview')\n  const [refreshing, setRefreshing] = useState(false)\n  const [autoRefresh, setAutoRefresh] = useState(true)\n\n  useEffect(() => {\n    loadPerformanceData()\n    \n    // Set up auto-refresh\n    let interval: NodeJS.Timeout\n    if (autoRefresh) {\n      interval = setInterval(loadPerformanceData, 30000) // Refresh every 30 seconds\n    }\n    \n    return () => {\n      if (interval) clearInterval(interval)\n    }\n  }, [timeRange, autoRefresh])\n\n  const loadPerformanceData = async () => {\n    try {\n      setError(null)\n      \n      const response = await fetch(`/api/monitoring/performance?timeRange=${timeRange}&metric=all`)\n      \n      if (!response.ok) {\n        throw new Error(`Failed to load performance data: ${response.status}`)\n      }\n      \n      const result = await response.json()\n      setPerformanceData(result.data)\n      \n    } catch (error) {\n      logger.error('Error loading performance data', error as Error)\n      setError('Failed to load performance data. Please try again.')\n    } finally {\n      setLoading(false)\n      setRefreshing(false)\n    }\n  }\n\n  const handleRefresh = async () => {\n    setRefreshing(true)\n    await loadPerformanceData()\n  }\n\n  const handleTimeRangeChange = (newTimeRange: '1h' | '24h' | '7d' | '30d') => {\n    setTimeRange(newTimeRange)\n    setLoading(true)\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'healthy': return 'text-green-600'\n      case 'degraded': return 'text-yellow-600'\n      case 'unhealthy': return 'text-red-600'\n      default: return 'text-gray-600'\n    }\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'healthy': return '‚úÖ'\n      case 'degraded': return '‚ö†Ô∏è'\n      case 'unhealthy': return '‚ùå'\n      default: return '‚ùì'\n    }\n  }\n\n  const formatResponseTime = (ms: number) => {\n    if (ms < 1000) return `${ms}ms`\n    return `${(ms / 1000).toFixed(1)}s`\n  }\n\n  if (loading) {\n    return (\n      <div className={`bg-white rounded-lg shadow ${className}`}>\n        <div className=\"p-8 text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading performance dashboard...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (error || !performanceData) {\n    return (\n      <div className={`bg-white rounded-lg shadow ${className}`}>\n        <div className=\"p-8 text-center\">\n          <div className=\"text-red-500 mb-4\">\n            <svg className=\"w-16 h-16 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n          </div>\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Unable to Load Performance Data</h2>\n          <p className=\"text-gray-600 mb-4\">{error}</p>\n          <Button onClick={loadPerformanceData} variant=\"primary\">\n            Try Again\n          </Button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">\n              Performance Monitoring Dashboard\n            </h1>\n            <p className=\"text-gray-600 mt-1\">\n              Real-time application performance and system health monitoring\n            </p>\n          </div>\n          \n          <div className=\"mt-4 sm:mt-0 flex items-center space-x-3\">\n            {/* System Status */}\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-2xl\">\n                {getStatusIcon(performanceData.systemStatus.status)}\n              </span>\n              <div>\n                <p className=\"text-sm text-gray-500\">System Status</p>\n                <p className={`font-semibold capitalize ${\n                  getStatusColor(performanceData.systemStatus.status)\n                }`}>\n                  {performanceData.systemStatus.status}\n                </p>\n              </div>\n            </div>\n            \n            {/* Time Range Selector */}\n            <div className=\"flex bg-gray-100 rounded-lg p-1\">\n              {[\n                { value: '1h', label: '1H' },\n                { value: '24h', label: '24H' },\n                { value: '7d', label: '7D' },\n                { value: '30d', label: '30D' }\n              ].map((option) => (\n                <button\n                  key={option.value}\n                  onClick={() => handleTimeRangeChange(option.value as any)}\n                  className={`px-3 py-1 text-sm font-medium rounded-md transition-colors ${\n                    timeRange === option.value\n                      ? 'bg-white text-primary-600 shadow-sm'\n                      : 'text-gray-500 hover:text-gray-700'\n                  }`}\n                >\n                  {option.label}\n                </button>\n              ))}\n            </div>\n            \n            {/* Controls */}\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                onClick={() => setAutoRefresh(!autoRefresh)}\n                variant={autoRefresh ? 'primary' : 'outline'}\n                size=\"sm\"\n              >\n                {autoRefresh ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è'} Auto\n              </Button>\n              \n              <Button\n                onClick={handleRefresh}\n                variant=\"ghost\"\n                size=\"sm\"\n                disabled={refreshing}\n                className=\"text-gray-500 hover:text-gray-700\"\n              >\n                {refreshing ? (\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-gray-300 border-t-gray-600\" />\n                ) : (\n                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                  </svg>\n                )}\n              </Button>\n            </div>\n          </div>\n        </div>\n        \n        {/* Navigation Tabs */}\n        <div className=\"mt-6 border-b border-gray-200\">\n          <nav className=\"flex space-x-8\">\n            {[\n              { id: 'overview', label: 'Overview', icon: 'üìä' },\n              { id: 'endpoints', label: 'Endpoints', icon: 'üîó' },\n              { id: 'trends', label: 'Trends', icon: 'üìà' },\n              { id: 'alerts', label: 'Alerts', icon: 'üö®' }\n            ].map((tab) => (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id as any)}\n                className={`flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm ${\n                  activeTab === tab.id\n                    ? 'border-primary-500 text-primary-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                <span>{tab.icon}</span>\n                <span>{tab.label}</span>\n              </button>\n            ))}\n          </nav>\n        </div>\n      </div>\n\n      {/* Tab Content */}\n      {activeTab === 'overview' && (\n        <div className=\"space-y-6\">\n          {/* Performance KPI Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {/* Total Requests */}\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-medium text-gray-900\">Total Requests</h3>\n                <div className=\"text-2xl\">üìä</div>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"text-3xl font-bold text-gray-900\">\n                  {performanceData.summary.totalRequests.toLocaleString()}\n                </p>\n                <p className=\"text-sm text-gray-600\">\n                  Last {timeRange === '1h' ? 'hour' : timeRange === '24h' ? '24 hours' : timeRange === '7d' ? '7 days' : '30 days'}\n                </p>\n              </div>\n            </div>\n\n            {/* Average Response Time */}\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-medium text-gray-900\">Avg Response</h3>\n                <div className=\"text-2xl\">‚ö°</div>\n              </div>\n              <div className=\"space-y-2\">\n                <p className={`text-3xl font-bold ${\n                  performanceData.summary.averageResponseTime < 500 ? 'text-green-600' :\n                  performanceData.summary.averageResponseTime < 1000 ? 'text-yellow-600' : 'text-red-600'\n                }`}>\n                  {formatResponseTime(performanceData.summary.averageResponseTime)}\n                </p>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm text-gray-600\">P95:</span>\n                  <span className=\"text-sm font-medium\">\n                    {formatResponseTime(performanceData.summary.p95ResponseTime)}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* Success Rate */}\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-medium text-gray-900\">Success Rate</h3>\n                <div className=\"text-2xl\">‚úÖ</div>\n              </div>\n              <div className=\"space-y-2\">\n                <p className={`text-3xl font-bold ${\n                  performanceData.summary.successRate >= 99 ? 'text-green-600' :\n                  performanceData.summary.successRate >= 95 ? 'text-yellow-600' : 'text-red-600'\n                }`}>\n                  {performanceData.summary.successRate.toFixed(1)}%\n                </p>\n                <p className=\"text-sm text-gray-600\">\n                  Error rate: {performanceData.summary.errorRate.toFixed(2)}%\n                </p>\n              </div>\n            </div>\n\n            {/* P99 Response Time */}\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-medium text-gray-900\">P99 Response</h3>\n                <div className=\"text-2xl\">üéØ</div>\n              </div>\n              <div className=\"space-y-2\">\n                <p className={`text-3xl font-bold ${\n                  performanceData.summary.p99ResponseTime < 1000 ? 'text-green-600' :\n                  performanceData.summary.p99ResponseTime < 2000 ? 'text-yellow-600' : 'text-red-600'\n                }`}>\n                  {formatResponseTime(performanceData.summary.p99ResponseTime)}\n                </p>\n                <p className=\"text-sm text-gray-600\">\n                  99th percentile\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* System Status Details */}\n          <SystemStatus \n            status={performanceData.systemStatus}\n            className=\"bg-white rounded-lg shadow p-6\"\n          />\n\n          {/* Performance Trends Chart */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Performance Trends</h3>\n            <PerformanceChart \n              data={performanceData.trends}\n              timeRange={timeRange}\n              height={300}\n            />\n          </div>\n        </div>\n      )}\n      \n      {activeTab === 'endpoints' && (\n        <EndpointMetrics \n          endpoints={performanceData.endpoints}\n          timeRange={timeRange}\n        />\n      )}\n      \n      {activeTab === 'trends' && (\n        <div className=\"space-y-6\">\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Detailed Performance Trends</h3>\n            <PerformanceChart \n              data={performanceData.trends}\n              timeRange={timeRange}\n              height={400}\n              showDetails\n            />\n          </div>\n          \n          {/* Trend Analysis */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Trend Analysis</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"p-4 bg-blue-50 rounded-lg\">\n                <h4 className=\"font-medium text-blue-900\">Response Time Trend</h4>\n                <p className=\"text-sm text-blue-700 mt-1\">\n                  {performanceData.trends.length > 1 ? (\n                    performanceData.trends[performanceData.trends.length - 1].averageResponseTime > \n                    performanceData.trends[0].averageResponseTime ? \n                    'üìà Increasing' : 'üìâ Decreasing'\n                  ) : 'Insufficient data'}\n                </p>\n              </div>\n              \n              <div className=\"p-4 bg-green-50 rounded-lg\">\n                <h4 className=\"font-medium text-green-900\">Request Volume</h4>\n                <p className=\"text-sm text-green-700 mt-1\">\n                  {performanceData.summary.totalRequests > 1000 ? 'üìà High' : \n                   performanceData.summary.totalRequests > 100 ? 'üìä Medium' : 'üìâ Low'} traffic\n                </p>\n              </div>\n              \n              <div className=\"p-4 bg-yellow-50 rounded-lg\">\n                <h4 className=\"font-medium text-yellow-900\">Error Rate Trend</h4>\n                <p className=\"text-sm text-yellow-700 mt-1\">\n                  {performanceData.summary.errorRate < 1 ? '‚úÖ Stable' : \n                   performanceData.summary.errorRate < 5 ? '‚ö†Ô∏è Elevated' : 'üö® High'}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {activeTab === 'alerts' && (\n        <AlertsPanel \n          userRole={userRole}\n          timeRange={timeRange}\n        />\n      )}\n    </div>\n  )\n}\n"