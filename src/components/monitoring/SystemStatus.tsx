'use client'\n\nimport { useState, useEffect } from 'react'\nimport { StatusBadge } from '@/components/ui/StatusBadge'\nimport { Button } from '@/components/ui/Button'\n\ninterface SystemStatusData {\n  status: 'healthy' | 'degraded' | 'unhealthy' | 'unknown'\n  message: string\n  metrics?: {\n    averageResponseTime: number\n    errorRate: number\n    totalRequests: number\n  }\n}\n\ninterface SystemStatusProps {\n  status: SystemStatusData\n  className?: string\n  showDetails?: boolean\n  onRefresh?: () => void\n}\n\nexport function SystemStatus({\n  status,\n  className,\n  showDetails = true,\n  onRefresh\n}: SystemStatusProps) {\n  const [lastUpdated, setLastUpdated] = useState(new Date())\n  const [expanded, setExpanded] = useState(false)\n\n  useEffect(() => {\n    setLastUpdated(new Date())\n  }, [status])\n\n  const getStatusColor = (statusType: string) => {\n    switch (statusType) {\n      case 'healthy': return 'text-green-600 bg-green-50 border-green-200'\n      case 'degraded': return 'text-yellow-600 bg-yellow-50 border-yellow-200'\n      case 'unhealthy': return 'text-red-600 bg-red-50 border-red-200'\n      default: return 'text-gray-600 bg-gray-50 border-gray-200'\n    }\n  }\n\n  const getStatusIcon = (statusType: string) => {\n    switch (statusType) {\n      case 'healthy': return (\n        <svg className=\"w-6 h-6 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n        </svg>\n      )\n      case 'degraded': return (\n        <svg className=\"w-6 h-6 text-yellow-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n        </svg>\n      )\n      case 'unhealthy': return (\n        <svg className=\"w-6 h-6 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n        </svg>\n      )\n      default: return (\n        <svg className=\"w-6 h-6 text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n        </svg>\n      )\n    }\n  }\n\n  const getStatusBadgeStatus = (statusType: string) => {\n    switch (statusType) {\n      case 'healthy': return 'approved'\n      case 'degraded': return 'warning'\n      case 'unhealthy': return 'error'\n      default: return 'pending'\n    }\n  }\n\n  const formatResponseTime = (ms: number) => {\n    if (ms < 1000) return `${ms}ms`\n    return `${(ms / 1000).toFixed(1)}s`\n  }\n\n  const formatLastUpdated = (date: Date) => {\n    const now = new Date()\n    const diffMs = now.getTime() - date.getTime()\n    const diffSeconds = Math.floor(diffMs / 1000)\n    const diffMinutes = Math.floor(diffSeconds / 60)\n    \n    if (diffSeconds < 60) {\n      return `${diffSeconds} seconds ago`\n    } else if (diffMinutes < 60) {\n      return `${diffMinutes} minutes ago`\n    } else {\n      return date.toLocaleTimeString()\n    }\n  }\n\n  return (\n    <div className={`border rounded-lg ${getStatusColor(status.status)} ${className}`}>\n      {/* Main Status Display */}\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex-shrink-0\">\n              {getStatusIcon(status.status)}\n            </div>\n            \n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-3\">\n                <h3 className=\"text-lg font-semibold text-gray-900\">\n                  System Status\n                </h3>\n                <StatusBadge \n                  status={getStatusBadgeStatus(status.status)}\n                  size=\"sm\"\n                >\n                  {status.status.charAt(0).toUpperCase() + status.status.slice(1)}\n                </StatusBadge>\n              </div>\n              \n              <p className=\"text-sm text-gray-600 mt-1\">\n                {status.message}\n              </p>\n              \n              <p className=\"text-xs text-gray-500 mt-2\">\n                Last updated: {formatLastUpdated(lastUpdated)}\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            {onRefresh && (\n              <Button\n                onClick={onRefresh}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-gray-500 hover:text-gray-700\"\n              >\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                </svg>\n              </Button>\n            )}\n            \n            {showDetails && status.metrics && (\n              <Button\n                onClick={() => setExpanded(!expanded)}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-gray-500 hover:text-gray-700\"\n              >\n                {expanded ? (\n                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 15l7-7 7 7\" />\n                  </svg>\n                ) : (\n                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                  </svg>\n                )}\n              </Button>\n            )}\n          </div>\n        </div>\n        \n        {/* Quick Metrics */}\n        {status.metrics && (\n          <div className=\"mt-4 grid grid-cols-3 gap-4\">\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {formatResponseTime(status.metrics.averageResponseTime)}\n              </p>\n              <p className=\"text-xs text-gray-600\">Avg Response</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {status.metrics.errorRate.toFixed(2)}%\n              </p>\n              <p className=\"text-xs text-gray-600\">Error Rate</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {status.metrics.totalRequests.toLocaleString()}\n              </p>\n              <p className=\"text-xs text-gray-600\">Requests</p>\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* Expanded Details */}\n      {expanded && status.metrics && (\n        <div className=\"border-t border-gray-200 p-6 bg-white bg-opacity-50\">\n          <h4 className=\"text-sm font-medium text-gray-900 mb-4\">Detailed Metrics</h4>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {/* Response Time Analysis */}\n            <div className=\"bg-white rounded-lg p-4 border border-gray-200\">\n              <h5 className=\"text-sm font-medium text-gray-700 mb-2\">Response Time</h5>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-xs text-gray-600\">Average:</span>\n                  <span className=\"text-xs font-medium\">\n                    {formatResponseTime(status.metrics.averageResponseTime)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-xs text-gray-600\">Status:</span>\n                  <span className={`text-xs font-medium ${\n                    status.metrics.averageResponseTime < 500 ? 'text-green-600' :\n                    status.metrics.averageResponseTime < 1000 ? 'text-yellow-600' : 'text-red-600'\n                  }`}>\n                    {status.metrics.averageResponseTime < 500 ? 'Excellent' :\n                     status.metrics.averageResponseTime < 1000 ? 'Good' : 'Needs Attention'}\n                  </span>\n                </div>\n              </div>\n            </div>\n            \n            {/* Error Rate Analysis */}\n            <div className=\"bg-white rounded-lg p-4 border border-gray-200\">\n              <h5 className=\"text-sm font-medium text-gray-700 mb-2\">Error Rate</h5>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-xs text-gray-600\">Current:</span>\n                  <span className=\"text-xs font-medium\">\n                    {status.metrics.errorRate.toFixed(3)}%\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-xs text-gray-600\">Status:</span>\n                  <span className={`text-xs font-medium ${\n                    status.metrics.errorRate < 0.1 ? 'text-green-600' :\n                    status.metrics.errorRate < 1 ? 'text-yellow-600' : 'text-red-600'\n                  }`}>\n                    {status.metrics.errorRate < 0.1 ? 'Excellent' :\n                     status.metrics.errorRate < 1 ? 'Acceptable' : 'High'}\n                  </span>\n                </div>\n              </div>\n            </div>\n            \n            {/* Request Volume */}\n            <div className=\"bg-white rounded-lg p-4 border border-gray-200\">\n              <h5 className=\"text-sm font-medium text-gray-700 mb-2\">Request Volume</h5>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-xs text-gray-600\">Total:</span>\n                  <span className=\"text-xs font-medium\">\n                    {status.metrics.totalRequests.toLocaleString()}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-xs text-gray-600\">Load:</span>\n                  <span className={`text-xs font-medium ${\n                    status.metrics.totalRequests > 1000 ? 'text-blue-600' :\n                    status.metrics.totalRequests > 100 ? 'text-green-600' : 'text-gray-600'\n                  }`}>\n                    {status.metrics.totalRequests > 1000 ? 'High' :\n                     status.metrics.totalRequests > 100 ? 'Normal' : 'Low'}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Health Recommendations */}\n          <div className=\"mt-4\">\n            <h5 className=\"text-sm font-medium text-gray-700 mb-2\">Health Recommendations</h5>\n            <div className=\"space-y-2\">\n              {status.metrics.averageResponseTime > 1000 && (\n                <div className=\"flex items-start space-x-2\">\n                  <div className=\"text-yellow-500 mt-0.5\">\n                    <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n                    </svg>\n                  </div>\n                  <p className=\"text-xs text-gray-600\">\n                    Response times are elevated. Consider optimizing database queries or scaling resources.\n                  </p>\n                </div>\n              )}\n              \n              {status.metrics.errorRate > 1 && (\n                <div className=\"flex items-start space-x-2\">\n                  <div className=\"text-red-500 mt-0.5\">\n                    <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                    </svg>\n                  </div>\n                  <p className=\"text-xs text-gray-600\">\n                    Error rate is high. Check application logs and recent deployments.\n                  </p>\n                </div>\n              )}\n              \n              {status.metrics.averageResponseTime < 500 && status.metrics.errorRate < 0.1 && (\n                <div className=\"flex items-start space-x-2\">\n                  <div className=\"text-green-500 mt-0.5\">\n                    <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                    </svg>\n                  </div>\n                  <p className=\"text-xs text-gray-600\">\n                    System is performing optimally. All metrics are within healthy ranges.\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n"