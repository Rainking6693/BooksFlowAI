'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Button } from '@/components/ui/Button'\nimport { ConfidenceIndicator } from '@/components/ui/ConfidenceIndicator'\nimport { StatusBadge } from '@/components/ui/StatusBadge'\nimport { formatFileSize } from '@/lib/utils'\nimport { logger } from '@/lib/logger'\n\ninterface MatchingCandidate {\n  transactionId: string\n  matchScore: number\n  matchReasons: string[]\n  transaction: {\n    description: string\n    amount: number\n    date: string\n    vendor?: string\n    account?: string\n    category?: string\n  }\n}\n\ninterface Receipt {\n  id: string\n  fileName: string\n  fileSize: number\n  ocr?: {\n    vendor?: string\n    amount?: number\n    date?: string\n    confidence?: number\n  }\n}\n\ninterface TransactionMatchingInterfaceProps {\n  receipt: Receipt\n  accountantId: string\n  onMatch?: (receiptId: string, transactionId: string) => void\n  onCreateTransaction?: (receiptId: string, transactionData: any) => void\n  className?: string\n}\n\nexport function TransactionMatchingInterface({\n  receipt,\n  accountantId,\n  onMatch,\n  onCreateTransaction,\n  className\n}: TransactionMatchingInterfaceProps) {\n  const [matches, setMatches] = useState<MatchingCandidate[]>([])\n  const [loading, setLoading] = useState(false)\n  const [selectedMatch, setSelectedMatch] = useState<string | null>(null)\n  const [showCreateForm, setShowCreateForm] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    if (receipt.ocr) {\n      findMatches()\n    }\n  }, [receipt.id, accountantId])\n\n  const findMatches = async () => {\n    try {\n      setLoading(true)\n      setError(null)\n      \n      const response = await fetch('/api/receipts/match', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          receiptId: receipt.id,\n          accountantId,\n          action: 'suggest'\n        })\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.error || 'Failed to find matches')\n      }\n\n      const result = await response.json()\n      setMatches(result.matches || [])\n      \n      logger.info('Found transaction matches', {\n        receiptId: receipt.id,\n        matchCount: result.matches?.length || 0\n      })\n\n    } catch (error) {\n      logger.error('Error finding matches', error as Error)\n      setError(error instanceof Error ? error.message : 'Unknown error')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleMatch = async (transactionId: string) => {\n    try {\n      setLoading(true)\n      \n      const response = await fetch('/api/receipts/match', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          receiptId: receipt.id,\n          accountantId,\n          transactionId,\n          action: 'link'\n        })\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.error || 'Failed to link transaction')\n      }\n\n      const result = await response.json()\n      \n      if (onMatch) {\n        onMatch(receipt.id, transactionId)\n      }\n      \n      logger.info('Receipt matched to transaction', {\n        receiptId: receipt.id,\n        transactionId,\n        matchScore: result.link?.matchScore\n      })\n\n    } catch (error) {\n      logger.error('Error matching receipt', error as Error)\n      setError(error instanceof Error ? error.message : 'Unknown error')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const getMatchConfidenceLevel = (score: number): 'high' | 'medium' | 'low' => {\n    if (score >= 0.8) return 'high'\n    if (score >= 0.5) return 'medium'\n    return 'low'\n  }\n\n  const getMatchConfidenceColor = (score: number) => {\n    if (score >= 0.8) return 'text-green-600'\n    if (score >= 0.5) return 'text-yellow-600'\n    return 'text-red-600'\n  }\n\n  return (\n    <div className={`bg-white border border-gray-200 rounded-lg ${className}`}>\n      {/* Header */}\n      <div className=\"p-4 border-b border-gray-100\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-lg font-medium text-gray-900\">Transaction Matching</h3>\n            <p className=\"text-sm text-gray-500 mt-1\">\n              Find and link this receipt to a transaction\n            </p>\n          </div>\n          \n          <Button\n            onClick={findMatches}\n            variant=\"outline\"\n            size=\"sm\"\n            disabled={loading}\n          >\n            {loading ? (\n              <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-primary-600 border-t-transparent mr-2\" />\n            ) : (\n              <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n              </svg>\n            )}\n            Refresh Matches\n          </Button>\n        </div>\n      </div>\n\n      {/* Receipt Summary */}\n      <div className=\"p-4 bg-gray-50 border-b border-gray-100\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex-shrink-0\">\n            <svg className=\"w-8 h-8 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n            </svg>\n          </div>\n          \n          <div className=\"flex-1\">\n            <h4 className=\"text-sm font-medium text-gray-900\">{receipt.fileName}</h4>\n            <p className=\"text-xs text-gray-500\">{formatFileSize(receipt.fileSize)}</p>\n          </div>\n          \n          {receipt.ocr && (\n            <div className=\"grid grid-cols-3 gap-4 text-sm\">\n              {receipt.ocr.vendor && (\n                <div>\n                  <span className=\"text-gray-500\">Vendor:</span>\n                  <div className=\"font-medium\">{receipt.ocr.vendor}</div>\n                </div>\n              )}\n              {receipt.ocr.amount && (\n                <div>\n                  <span className=\"text-gray-500\">Amount:</span>\n                  <div className=\"font-medium font-mono\">${receipt.ocr.amount.toFixed(2)}</div>\n                </div>\n              )}\n              {receipt.ocr.date && (\n                <div>\n                  <span className=\"text-gray-500\">Date:</span>\n                  <div className=\"font-medium\">{new Date(receipt.ocr.date).toLocaleDateString()}</div>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Error State */}\n      {error && (\n        <div className=\"p-4 bg-red-50 border-b border-red-100\">\n          <div className=\"flex items-center space-x-2\">\n            <svg className=\"w-5 h-5 text-red-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n            <span className=\"text-sm text-red-700\">{error}</span>\n          </div>\n        </div>\n      )}\n\n      {/* Loading State */}\n      {loading && matches.length === 0 && (\n        <div className=\"p-8 text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-2 border-primary-600 border-t-transparent mx-auto mb-4\" />\n          <p className=\"text-sm text-gray-500\">Finding matching transactions...</p>\n        </div>\n      )}\n\n      {/* No Matches */}\n      {!loading && matches.length === 0 && !error && (\n        <div className=\"p-8 text-center\">\n          <svg className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9.172 16.172a4 4 0 015.656 0M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n          </svg>\n          <h3 className=\"text-sm font-medium text-gray-900 mb-2\">No Matching Transactions Found</h3>\n          <p className=\"text-sm text-gray-500 mb-4\">\n            We couldn't find any transactions that match this receipt.\n          </p>\n          \n          <div className=\"space-y-2\">\n            <Button\n              onClick={() => setShowCreateForm(true)}\n              variant=\"primary\"\n              size=\"sm\"\n            >\n              Create New Transaction\n            </Button>\n            \n            <Button\n              onClick={() => {\n                // Extend search range or manual search\n                console.log('Manual search for receipt:', receipt.id)\n              }}\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              Manual Search\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {/* Matching Candidates */}\n      {matches.length > 0 && (\n        <div className=\"p-4\">\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-medium text-gray-900 mb-2\">\n              Potential Matches ({matches.length})\n            </h4>\n            <p className=\"text-xs text-gray-500\">\n              Select the transaction that best matches this receipt\n            </p>\n          </div>\n          \n          <div className=\"space-y-3\">\n            {matches.map((match, index) => (\n              <div\n                key={match.transactionId}\n                className={`border rounded-lg p-4 cursor-pointer transition-colors ${\n                  selectedMatch === match.transactionId\n                    ? 'border-primary-500 bg-primary-50'\n                    : 'border-gray-200 hover:border-gray-300'\n                }`}\n                onClick={() => setSelectedMatch(match.transactionId)}\n              >\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      <div className=\"flex-shrink-0\">\n                        <input\n                          type=\"radio\"\n                          name=\"transaction-match\"\n                          value={match.transactionId}\n                          checked={selectedMatch === match.transactionId}\n                          onChange={() => setSelectedMatch(match.transactionId)}\n                          className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300\"\n                        />\n                      </div>\n                      \n                      <div className=\"flex-1\">\n                        <h5 className=\"text-sm font-medium text-gray-900\">\n                          {match.transaction.description}\n                        </h5>\n                        \n                        <div className=\"mt-1 grid grid-cols-2 md:grid-cols-4 gap-2 text-xs text-gray-500\">\n                          <div>\n                            <span className=\"font-medium\">Amount:</span>\n                            <span className=\"ml-1 font-mono\">\n                              ${Math.abs(match.transaction.amount).toFixed(2)}\n                            </span>\n                          </div>\n                          \n                          <div>\n                            <span className=\"font-medium\">Date:</span>\n                            <span className=\"ml-1\">\n                              {new Date(match.transaction.date).toLocaleDateString()}\n                            </span>\n                          </div>\n                          \n                          {match.transaction.vendor && (\n                            <div>\n                              <span className=\"font-medium\">Vendor:</span>\n                              <span className=\"ml-1\">{match.transaction.vendor}</span>\n                            </div>\n                          )}\n                          \n                          {match.transaction.category && (\n                            <div>\n                              <span className=\"font-medium\">Category:</span>\n                              <span className=\"ml-1\">{match.transaction.category}</span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* Match Reasons */}\n                    <div className=\"ml-7\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <ConfidenceIndicator\n                          confidence={getMatchConfidenceLevel(match.matchScore)}\n                          score={match.matchScore}\n                          showScore\n                          size=\"sm\"\n                        />\n                        <span className={`text-xs font-medium ${getMatchConfidenceColor(match.matchScore)}`}>\n                          {Math.round(match.matchScore * 100)}% Match\n                        </span>\n                      </div>\n                      \n                      <div className=\"flex flex-wrap gap-1\">\n                        {match.matchReasons.map((reason, reasonIndex) => (\n                          <span\n                            key={reasonIndex}\n                            className=\"inline-flex items-center px-2 py-1 rounded-full text-xs bg-blue-100 text-blue-800\"\n                          >\n                            {reason}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          {/* Action Buttons */}\n          <div className=\"mt-6 flex items-center justify-between\">\n            <Button\n              onClick={() => setShowCreateForm(true)}\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              Create New Transaction\n            </Button>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Button\n                onClick={() => setSelectedMatch(null)}\n                variant=\"ghost\"\n                size=\"sm\"\n                disabled={!selectedMatch}\n              >\n                Clear Selection\n              </Button>\n              \n              <Button\n                onClick={() => selectedMatch && handleMatch(selectedMatch)}\n                variant=\"primary\"\n                size=\"sm\"\n                disabled={!selectedMatch || loading}\n              >\n                {loading ? 'Linking...' : 'Link to Transaction'}\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Create Transaction Form */}\n      {showCreateForm && (\n        <div className=\"p-4 border-t border-gray-100 bg-gray-50\">\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-medium text-gray-900 mb-2\">\n              Create New Transaction\n            </h4>\n            <p className=\"text-xs text-gray-500\">\n              Create a new transaction based on this receipt\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n            <div>\n              <label className=\"block text-xs font-medium text-gray-700 mb-1\">\n                Description\n              </label>\n              <input\n                type=\"text\"\n                defaultValue={receipt.ocr?.vendor || ''}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-xs font-medium text-gray-700 mb-1\">\n                Amount\n              </label>\n              <input\n                type=\"number\"\n                step=\"0.01\"\n                defaultValue={receipt.ocr?.amount || ''}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-xs font-medium text-gray-700 mb-1\">\n                Date\n              </label>\n              <input\n                type=\"date\"\n                defaultValue={receipt.ocr?.date ? new Date(receipt.ocr.date).toISOString().split('T')[0] : ''}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-xs font-medium text-gray-700 mb-1\">\n                Category\n              </label>\n              <select className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500\">\n                <option value=\"\">Select category...</option>\n                <option value=\"meals\">Meals & Entertainment</option>\n                <option value=\"office\">Office Supplies</option>\n                <option value=\"travel\">Travel</option>\n                <option value=\"utilities\">Utilities</option>\n                <option value=\"other\">Other</option>\n              </select>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button\n              onClick={() => setShowCreateForm(false)}\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              Cancel\n            </Button>\n            \n            <Button\n              onClick={() => {\n                // Handle create transaction\n                console.log('Create transaction for receipt:', receipt.id)\n                setShowCreateForm(false)\n              }}\n              variant=\"primary\"\n              size=\"sm\"\n            >\n              Create & Link\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n"