'use client'\n\nimport { useState, useEffect } from 'react'\nimport { supabase } from '@/lib/supabase'\nimport { Button } from '@/components/ui/Button'\nimport { TransactionCard } from './TransactionCard'\nimport { ConfidenceFilter } from './ConfidenceFilter'\nimport { BulkActions } from './BulkActions'\nimport { logger } from '@/lib/logger'\n\ninterface Transaction {\n  id: string\n  description: string\n  amount: number\n  vendor_name?: string\n  transaction_date: string\n  account_name?: string\n  ai_suggested_category_id?: string\n  ai_confidence?: 'high' | 'medium' | 'low'\n  ai_reasoning?: string\n  status: 'pending' | 'approved' | 'rejected'\n  category?: {\n    id: string\n    name: string\n  }\n}\n\ninterface TransactionReviewDashboardProps {\n  accountantId: string\n}\n\nexport function TransactionReviewDashboard({ accountantId }: TransactionReviewDashboardProps) {\n  const [transactions, setTransactions] = useState<Transaction[]>([])\n  const [loading, setLoading] = useState(true)\n  const [selectedTransactions, setSelectedTransactions] = useState<Set<string>>(new Set())\n  const [confidenceFilter, setConfidenceFilter] = useState<'all' | 'high' | 'medium' | 'low'>('all')\n  const [statusFilter, setStatusFilter] = useState<'all' | 'pending' | 'approved' | 'rejected'>('pending')\n  const [processing, setProcessing] = useState(false)\n  const [stats, setStats] = useState({\n    total: 0,\n    pending: 0,\n    highConfidence: 0,\n    mediumConfidence: 0,\n    lowConfidence: 0\n  })\n\n  useEffect(() => {\n    loadTransactions()\n  }, [accountantId, confidenceFilter, statusFilter])\n\n  const loadTransactions = async () => {\n    try {\n      setLoading(true)\n      \n      let query = supabase\n        .from('transactions')\n        .select(`\n          *,\n          category:transaction_categories!ai_suggested_category_id(\n            id,\n            name\n          )\n        `)\n        .eq('accountant_id', accountantId)\n        .order('transaction_date', { ascending: false })\n\n      // Apply filters\n      if (statusFilter !== 'all') {\n        query = query.eq('status', statusFilter)\n      }\n\n      if (confidenceFilter !== 'all') {\n        query = query.eq('ai_confidence', confidenceFilter)\n      }\n\n      const { data, error } = await query.limit(100)\n\n      if (error) {\n        logger.error('Failed to load transactions', error)\n        throw error\n      }\n\n      setTransactions(data || [])\n      \n      // Calculate stats\n      const newStats = {\n        total: data?.length || 0,\n        pending: data?.filter(t => t.status === 'pending').length || 0,\n        highConfidence: data?.filter(t => t.ai_confidence === 'high').length || 0,\n        mediumConfidence: data?.filter(t => t.ai_confidence === 'medium').length || 0,\n        lowConfidence: data?.filter(t => t.ai_confidence === 'low').length || 0\n      }\n      setStats(newStats)\n\n    } catch (error) {\n      logger.error('Error loading transactions', error as Error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleTransactionSelect = (transactionId: string, selected: boolean) => {\n    const newSelected = new Set(selectedTransactions)\n    if (selected) {\n      newSelected.add(transactionId)\n    } else {\n      newSelected.delete(transactionId)\n    }\n    setSelectedTransactions(newSelected)\n  }\n\n  const handleSelectAll = () => {\n    const pendingTransactions = transactions.filter(t => t.status === 'pending')\n    if (selectedTransactions.size === pendingTransactions.length) {\n      setSelectedTransactions(new Set())\n    } else {\n      setSelectedTransactions(new Set(pendingTransactions.map(t => t.id)))\n    }\n  }\n\n  const handleBulkAction = async (action: 'approve' | 'reject' | 'categorize') => {\n    if (selectedTransactions.size === 0) return\n\n    try {\n      setProcessing(true)\n      \n      if (action === 'categorize') {\n        // Trigger AI categorization for selected transactions\n        const response = await fetch('/api/ai/categorize', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            transactionIds: Array.from(selectedTransactions),\n            accountantId,\n            batchMode: true\n          })\n        })\n\n        if (!response.ok) {\n          throw new Error('Failed to categorize transactions')\n        }\n\n        const result = await response.json()\n        logger.info('Bulk categorization completed', result)\n      } else {\n        // Approve or reject selected transactions\n        const response = await fetch('/api/transactions/approve', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            transactionIds: Array.from(selectedTransactions),\n            accountantId,\n            action\n          })\n        })\n\n        if (!response.ok) {\n          throw new Error(`Failed to ${action} transactions`)\n        }\n\n        const result = await response.json()\n        logger.info(`Bulk ${action} completed`, result)\n      }\n\n      // Reload transactions and clear selection\n      await loadTransactions()\n      setSelectedTransactions(new Set())\n\n    } catch (error) {\n      logger.error(`Error during bulk ${action}`, error as Error)\n    } finally {\n      setProcessing(false)\n    }\n  }\n\n  const handleSingleAction = async (transactionId: string, action: 'approve' | 'reject') => {\n    try {\n      const response = await fetch('/api/transactions/approve', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          transactionIds: [transactionId],\n          accountantId,\n          action\n        })\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to ${action} transaction`)\n      }\n\n      // Reload transactions\n      await loadTransactions()\n\n    } catch (error) {\n      logger.error(`Error ${action}ing transaction`, error as Error)\n    }\n  }\n\n  const filteredTransactions = transactions.filter(transaction => {\n    if (statusFilter !== 'all' && transaction.status !== statusFilter) {\n      return false\n    }\n    if (confidenceFilter !== 'all' && transaction.ai_confidence !== confidenceFilter) {\n      return false\n    }\n    return true\n  })\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600\"></div>\n        <span className=\"ml-2 text-gray-600\">Loading transactions...</span>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with Stats */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-2xl font-bold text-gray-900\">Transaction Review</h2>\n          <Button\n            onClick={loadTransactions}\n            variant=\"outline\"\n            size=\"sm\"\n            disabled={loading}\n          >\n            <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n            </svg>\n            Refresh\n          </Button>\n        </div>\n        \n        <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-gray-900\">{stats.total}</div>\n            <div className=\"text-sm text-gray-500\">Total</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-warning-600\">{stats.pending}</div>\n            <div className=\"text-sm text-gray-500\">Pending</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-success-600\">{stats.highConfidence}</div>\n            <div className=\"text-sm text-gray-500\">High Confidence</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-warning-600\">{stats.mediumConfidence}</div>\n            <div className=\"text-sm text-gray-500\">Medium Confidence</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-error-600\">{stats.lowConfidence}</div>\n            <div className=\"text-sm text-gray-500\">Low Confidence</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"bg-white rounded-lg shadow p-4\">\n        <div className=\"flex flex-wrap items-center gap-4\">\n          <div className=\"flex items-center space-x-2\">\n            <label className=\"text-sm font-medium text-gray-700\">Status:</label>\n            <select\n              value={statusFilter}\n              onChange={(e) => setStatusFilter(e.target.value as any)}\n              className=\"border border-gray-300 rounded-md px-3 py-1 text-sm\"\n            >\n              <option value=\"all\">All</option>\n              <option value=\"pending\">Pending</option>\n              <option value=\"approved\">Approved</option>\n              <option value=\"rejected\">Rejected</option>\n            </select>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <label className=\"text-sm font-medium text-gray-700\">Confidence:</label>\n            <select\n              value={confidenceFilter}\n              onChange={(e) => setConfidenceFilter(e.target.value as any)}\n              className=\"border border-gray-300 rounded-md px-3 py-1 text-sm\"\n            >\n              <option value=\"all\">All</option>\n              <option value=\"high\">High</option>\n              <option value=\"medium\">Medium</option>\n              <option value=\"low\">Low</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* Bulk Actions */}\n      {selectedTransactions.size > 0 && (\n        <BulkActions\n          selectedCount={selectedTransactions.size}\n          onApprove={() => handleBulkAction('approve')}\n          onReject={() => handleBulkAction('reject')}\n          onCategorize={() => handleBulkAction('categorize')}\n          processing={processing}\n        />\n      )}\n\n      {/* Transaction List */}\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"p-4 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-medium text-gray-900\">\n              Transactions ({filteredTransactions.length})\n            </h3>\n            {filteredTransactions.filter(t => t.status === 'pending').length > 0 && (\n              <Button\n                onClick={handleSelectAll}\n                variant=\"outline\"\n                size=\"sm\"\n              >\n                {selectedTransactions.size === filteredTransactions.filter(t => t.status === 'pending').length\n                  ? 'Deselect All'\n                  : 'Select All Pending'\n                }\n              </Button>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"divide-y divide-gray-200\">\n          {filteredTransactions.length === 0 ? (\n            <div className=\"p-8 text-center text-gray-500\">\n              No transactions found matching the current filters.\n            </div>\n          ) : (\n            filteredTransactions.map((transaction) => (\n              <TransactionCard\n                key={transaction.id}\n                transaction={transaction}\n                selected={selectedTransactions.has(transaction.id)}\n                onSelect={(selected) => handleTransactionSelect(transaction.id, selected)}\n                onApprove={() => handleSingleAction(transaction.id, 'approve')}\n                onReject={() => handleSingleAction(transaction.id, 'reject')}\n                disabled={processing}\n              />\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n"