'use client'\n\nimport { cn } from '@/lib/utils'\n\ninterface ConfidenceIndicatorProps {\n  confidence: 'high' | 'medium' | 'low'\n  score?: number\n  size?: 'sm' | 'md' | 'lg'\n  showLabel?: boolean\n  showScore?: boolean\n  className?: string\n}\n\nexport function ConfidenceIndicator({\n  confidence,\n  score,\n  size = 'md',\n  showLabel = true,\n  showScore = false,\n  className\n}: ConfidenceIndicatorProps) {\n  const getConfidenceConfig = (confidence: string) => {\n    switch (confidence) {\n      case 'high':\n        return {\n          color: 'bg-success-100 text-success-800 border-success-200',\n          icon: (\n            <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n            </svg>\n          ),\n          label: 'High Confidence',\n          description: '95%+ accuracy'\n        }\n      case 'medium':\n        return {\n          color: 'bg-warning-100 text-warning-800 border-warning-200',\n          icon: (\n            <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n            </svg>\n          ),\n          label: 'Medium Confidence',\n          description: '70-94% accuracy'\n        }\n      case 'low':\n        return {\n          color: 'bg-error-100 text-error-800 border-error-200',\n          icon: (\n            <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n            </svg>\n          ),\n          label: 'Low Confidence',\n          description: 'Manual review needed'\n        }\n      default:\n        return {\n          color: 'bg-gray-100 text-gray-800 border-gray-200',\n          icon: (\n            <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z\" clipRule=\"evenodd\" />\n            </svg>\n          ),\n          label: 'Unknown',\n          description: 'Not processed'\n        }\n    }\n  }\n\n  const getSizeClasses = (size: string) => {\n    switch (size) {\n      case 'sm':\n        return 'px-2 py-1 text-xs'\n      case 'lg':\n        return 'px-4 py-2 text-sm'\n      default:\n        return 'px-2.5 py-1.5 text-xs'\n    }\n  }\n\n  const config = getConfidenceConfig(confidence)\n  const sizeClasses = getSizeClasses(size)\n\n  return (\n    <div className={cn(\n      'inline-flex items-center rounded-full border font-medium',\n      config.color,\n      sizeClasses,\n      className\n    )}>\n      {config.icon}\n      {showLabel && (\n        <span className=\"ml-1.5\">\n          {showScore && score ? `${Math.round(score * 100)}%` : config.label}\n        </span>\n      )}\n    </div>\n  )\n}\n\n// Confidence Progress Bar Component\ninterface ConfidenceProgressProps {\n  confidence: 'high' | 'medium' | 'low'\n  score: number\n  className?: string\n}\n\nexport function ConfidenceProgress({ confidence, score, className }: ConfidenceProgressProps) {\n  const getProgressColor = (confidence: string) => {\n    switch (confidence) {\n      case 'high':\n        return 'bg-success-500'\n      case 'medium':\n        return 'bg-warning-500'\n      case 'low':\n        return 'bg-error-500'\n      default:\n        return 'bg-gray-500'\n    }\n  }\n\n  const progressColor = getProgressColor(confidence)\n  const percentage = Math.round(score * 100)\n\n  return (\n    <div className={cn('w-full', className)}>\n      <div className=\"flex justify-between items-center mb-1\">\n        <span className=\"text-xs font-medium text-gray-700\">AI Confidence</span>\n        <span className=\"text-xs text-gray-500\">{percentage}%</span>\n      </div>\n      <div className=\"w-full bg-gray-200 rounded-full h-2\">\n        <div\n          className={cn('h-2 rounded-full transition-all duration-300', progressColor)}\n          style={{ width: `${percentage}%` }}\n        ></div>\n      </div>\n    </div>\n  )\n}\n\n// Confidence Tooltip Component\ninterface ConfidenceTooltipProps {\n  confidence: 'high' | 'medium' | 'low'\n  score: number\n  reasoning?: string\n  children: React.ReactNode\n}\n\nexport function ConfidenceTooltip({ confidence, score, reasoning, children }: ConfidenceTooltipProps) {\n  const getTooltipContent = () => {\n    const percentage = Math.round(score * 100)\n    const config = {\n      high: {\n        title: 'High Confidence',\n        description: 'AI is very confident in this categorization',\n        recommendation: 'Safe to auto-approve'\n      },\n      medium: {\n        title: 'Medium Confidence', \n        description: 'AI has moderate confidence in this categorization',\n        recommendation: 'Quick review recommended'\n      },\n      low: {\n        title: 'Low Confidence',\n        description: 'AI is uncertain about this categorization',\n        recommendation: 'Manual review required'\n      }\n    }[confidence]\n\n    return (\n      <div className=\"p-3 max-w-xs\">\n        <div className=\"font-semibold text-gray-900 mb-1\">\n          {config.title} ({percentage}%)\n        </div>\n        <div className=\"text-sm text-gray-600 mb-2\">\n          {config.description}\n        </div>\n        <div className=\"text-xs text-gray-500 mb-2\">\n          ðŸ’¡ {config.recommendation}\n        </div>\n        {reasoning && (\n          <div className=\"text-xs text-gray-600 border-t pt-2\">\n            <strong>AI Reasoning:</strong> {reasoning}\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"group relative inline-block\">\n      {children}\n      <div className=\"invisible group-hover:visible absolute z-10 bottom-full left-1/2 transform -translate-x-1/2 mb-2\">\n        <div className=\"bg-white border border-gray-200 rounded-lg shadow-lg\">\n          {getTooltipContent()}\n          <div className=\"absolute top-full left-1/2 transform -translate-x-1/2\">\n            <div className=\"border-4 border-transparent border-t-white\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n"