'use client'\n\nimport { cn } from '@/lib/utils'\n\ninterface StatusBadgeProps {\n  status: 'pending' | 'approved' | 'rejected' | 'processing' | 'synced' | 'error'\n  size?: 'sm' | 'md' | 'lg'\n  showIcon?: boolean\n  className?: string\n}\n\nexport function StatusBadge({ \n  status, \n  size = 'md', \n  showIcon = true, \n  className \n}: StatusBadgeProps) {\n  const getStatusConfig = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return {\n          color: 'bg-warning-100 text-warning-800 border-warning-200',\n          icon: (\n            <svg className=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n          ),\n          label: 'Pending Review',\n          pulse: true\n        }\n      case 'approved':\n        return {\n          color: 'bg-success-100 text-success-800 border-success-200',\n          icon: (\n            <svg className=\"w-3 h-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n            </svg>\n          ),\n          label: 'Approved',\n          pulse: false\n        }\n      case 'rejected':\n        return {\n          color: 'bg-error-100 text-error-800 border-error-200',\n          icon: (\n            <svg className=\"w-3 h-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n            </svg>\n          ),\n          label: 'Rejected',\n          pulse: false\n        }\n      case 'processing':\n        return {\n          color: 'bg-info-100 text-info-800 border-info-200',\n          icon: (\n            <svg className=\"w-3 h-3 animate-spin\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n            </svg>\n          ),\n          label: 'Processing',\n          pulse: true\n        }\n      case 'synced':\n        return {\n          color: 'bg-primary-100 text-primary-800 border-primary-200',\n          icon: (\n            <svg className=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n            </svg>\n          ),\n          label: 'Synced',\n          pulse: false\n        }\n      case 'error':\n        return {\n          color: 'bg-error-100 text-error-800 border-error-200',\n          icon: (\n            <svg className=\"w-3 h-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n            </svg>\n          ),\n          label: 'Error',\n          pulse: true\n        }\n      default:\n        return {\n          color: 'bg-gray-100 text-gray-800 border-gray-200',\n          icon: (\n            <svg className=\"w-3 h-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z\" clipRule=\"evenodd\" />\n            </svg>\n          ),\n          label: 'Unknown',\n          pulse: false\n        }\n    }\n  }\n\n  const getSizeClasses = (size: string) => {\n    switch (size) {\n      case 'sm':\n        return 'px-2 py-0.5 text-xs'\n      case 'lg':\n        return 'px-3 py-1.5 text-sm'\n      default:\n        return 'px-2.5 py-1 text-xs'\n    }\n  }\n\n  const config = getStatusConfig(status)\n  const sizeClasses = getSizeClasses(size)\n\n  return (\n    <span className={cn(\n      'inline-flex items-center rounded-full border font-medium',\n      config.color,\n      sizeClasses,\n      config.pulse && 'animate-pulse',\n      className\n    )}>\n      {showIcon && (\n        <span className=\"mr-1\">{config.icon}</span>\n      )}\n      {config.label}\n    </span>\n  )\n}\n\n// Status Dot Component (minimal version)\ninterface StatusDotProps {\n  status: 'pending' | 'approved' | 'rejected' | 'processing' | 'synced' | 'error'\n  size?: 'sm' | 'md' | 'lg'\n  className?: string\n}\n\nexport function StatusDot({ status, size = 'md', className }: StatusDotProps) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'bg-warning-500'\n      case 'approved':\n        return 'bg-success-500'\n      case 'rejected':\n        return 'bg-error-500'\n      case 'processing':\n        return 'bg-info-500 animate-pulse'\n      case 'synced':\n        return 'bg-primary-500'\n      case 'error':\n        return 'bg-error-500 animate-pulse'\n      default:\n        return 'bg-gray-500'\n    }\n  }\n\n  const getSizeClasses = (size: string) => {\n    switch (size) {\n      case 'sm':\n        return 'w-2 h-2'\n      case 'lg':\n        return 'w-4 h-4'\n      default:\n        return 'w-3 h-3'\n    }\n  }\n\n  return (\n    <div className={cn(\n      'rounded-full',\n      getStatusColor(status),\n      getSizeClasses(size),\n      className\n    )} />\n  )\n}\n\n// Status Timeline Component\ninterface StatusTimelineProps {\n  statuses: Array<{\n    status: 'pending' | 'approved' | 'rejected' | 'processing' | 'synced' | 'error'\n    timestamp: string\n    description?: string\n  }>\n  className?: string\n}\n\nexport function StatusTimeline({ statuses, className }: StatusTimelineProps) {\n  return (\n    <div className={cn('space-y-3', className)}>\n      {statuses.map((item, index) => (\n        <div key={index} className=\"flex items-start space-x-3\">\n          <div className=\"flex-shrink-0 mt-1\">\n            <StatusDot status={item.status} />\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center space-x-2\">\n              <StatusBadge status={item.status} size=\"sm\" />\n              <span className=\"text-xs text-gray-500\">\n                {new Date(item.timestamp).toLocaleString()}\n              </span>\n            </div>\n            {item.description && (\n              <p className=\"text-sm text-gray-600 mt-1\">{item.description}</p>\n            )}\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n\n// Status Summary Component\ninterface StatusSummaryProps {\n  counts: {\n    pending?: number\n    approved?: number\n    rejected?: number\n    processing?: number\n    synced?: number\n    error?: number\n  }\n  className?: string\n}\n\nexport function StatusSummary({ counts, className }: StatusSummaryProps) {\n  const statusTypes = [\n    { key: 'pending', label: 'Pending' },\n    { key: 'approved', label: 'Approved' },\n    { key: 'rejected', label: 'Rejected' },\n    { key: 'processing', label: 'Processing' },\n    { key: 'synced', label: 'Synced' },\n    { key: 'error', label: 'Error' }\n  ] as const\n\n  const total = Object.values(counts).reduce((sum, count) => sum + (count || 0), 0)\n\n  return (\n    <div className={cn('grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4', className)}>\n      {statusTypes.map(({ key, label }) => {\n        const count = counts[key] || 0\n        const percentage = total > 0 ? Math.round((count / total) * 100) : 0\n        \n        return (\n          <div key={key} className=\"text-center\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <StatusDot status={key} className=\"mr-2\" />\n              <span className=\"text-2xl font-bold text-gray-900\">{count}</span>\n            </div>\n            <div className=\"text-sm text-gray-600\">{label}</div>\n            <div className=\"text-xs text-gray-500\">{percentage}%</div>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n"