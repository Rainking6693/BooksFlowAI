/**\n * Email Service Integration\n * Handles automated email notifications for BooksFlowAI\n */\n\nimport { logger } from '../logger'\nimport { ExternalServiceError, withRetry, CircuitBreaker } from '../errors'\nimport { APP_CONFIG } from '../config'\n\n// Email Service Configuration\nconst EMAIL_CONFIG = {\n  SENDGRID_API_KEY: process.env.SENDGRID_API_KEY!,\n  FROM_EMAIL: process.env.FROM_EMAIL || 'noreply@booksflowai.com',\n  FROM_NAME: process.env.FROM_NAME || 'BooksFlowAI',\n  RETRY_ATTEMPTS: 3,\n  RETRY_DELAY: 1000,\n  TIMEOUT: 10000\n}\n\n// Circuit breaker for email service resilience\nconst emailCircuitBreaker = new CircuitBreaker(5, 60000, 'Email-Service')\n\n// Email Types\nexport interface EmailRecipient {\n  email: string\n  name?: string\n}\n\nexport interface EmailTemplate {\n  templateId?: string\n  subject: string\n  htmlContent?: string\n  textContent?: string\n  dynamicData?: Record<string, any>\n}\n\nexport interface EmailResult {\n  success: boolean\n  messageId?: string\n  error?: string\n  timestamp: string\n}\n\nexport interface MissingReceiptNotification {\n  clientName: string\n  clientEmail: string\n  accountantName: string\n  missingReceipts: Array<{\n    description: string\n    amount: number\n    date: string\n    daysOverdue: number\n  }>\n  totalAmount: number\n  portalUrl: string\n}\n\nexport interface ReportReadyNotification {\n  clientName: string\n  clientEmail: string\n  reportTitle: string\n  reportPeriod: string\n  downloadUrl: string\n  accountantName: string\n}\n\nexport interface WelcomeNotification {\n  clientName: string\n  clientEmail: string\n  accountantName: string\n  portalUrl: string\n  setupInstructions: string[]\n}\n\n/**\n * Send missing receipt reminder email to client\n */\nexport async function sendMissingReceiptReminder(\n  notification: MissingReceiptNotification\n): Promise<EmailResult> {\n  const startTime = Date.now()\n  \n  try {\n    logger.info('Sending missing receipt reminder', {\n      clientEmail: notification.clientEmail,\n      missingCount: notification.missingReceipts.length,\n      totalAmount: notification.totalAmount\n    })\n\n    const emailData = {\n      to: [{ email: notification.clientEmail, name: notification.clientName }],\n      subject: `📄 Missing Receipts Reminder - ${notification.missingReceipts.length} receipts needed`,\n      htmlContent: generateMissingReceiptHTML(notification),\n      textContent: generateMissingReceiptText(notification)\n    }\n\n    const result = await emailCircuitBreaker.execute(() =>\n      withRetry(\n        () => sendEmailViaProvider(emailData),\n        EMAIL_CONFIG.RETRY_ATTEMPTS,\n        EMAIL_CONFIG.RETRY_DELAY,\n        { clientEmail: notification.clientEmail }\n      )\n    )\n\n    const processingTime = Date.now() - startTime\n\n    logger.info('Missing receipt reminder sent successfully', {\n      clientEmail: notification.clientEmail,\n      messageId: result.messageId,\n      processingTime\n    })\n\n    return {\n      success: true,\n      messageId: result.messageId,\n      timestamp: new Date().toISOString()\n    }\n\n  } catch (error) {\n    const processingTime = Date.now() - startTime\n    \n    logger.error('Failed to send missing receipt reminder', error as Error, {\n      clientEmail: notification.clientEmail,\n      processingTime\n    })\n\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error',\n      timestamp: new Date().toISOString()\n    }\n  }\n}\n\n/**\n * Send report ready notification to client\n */\nexport async function sendReportReadyNotification(\n  notification: ReportReadyNotification\n): Promise<EmailResult> {\n  const startTime = Date.now()\n  \n  try {\n    logger.info('Sending report ready notification', {\n      clientEmail: notification.clientEmail,\n      reportTitle: notification.reportTitle\n    })\n\n    const emailData = {\n      to: [{ email: notification.clientEmail, name: notification.clientName }],\n      subject: `📊 Your ${notification.reportTitle} is Ready`,\n      htmlContent: generateReportReadyHTML(notification),\n      textContent: generateReportReadyText(notification)\n    }\n\n    const result = await emailCircuitBreaker.execute(() =>\n      withRetry(\n        () => sendEmailViaProvider(emailData),\n        EMAIL_CONFIG.RETRY_ATTEMPTS,\n        EMAIL_CONFIG.RETRY_DELAY,\n        { clientEmail: notification.clientEmail }\n      )\n    )\n\n    const processingTime = Date.now() - startTime\n\n    logger.info('Report ready notification sent successfully', {\n      clientEmail: notification.clientEmail,\n      messageId: result.messageId,\n      processingTime\n    })\n\n    return {\n      success: true,\n      messageId: result.messageId,\n      timestamp: new Date().toISOString()\n    }\n\n  } catch (error) {\n    const processingTime = Date.now() - startTime\n    \n    logger.error('Failed to send report ready notification', error as Error, {\n      clientEmail: notification.clientEmail,\n      processingTime\n    })\n\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error',\n      timestamp: new Date().toISOString()\n    }\n  }\n}\n\n/**\n * Send welcome email to new client\n */\nexport async function sendWelcomeNotification(\n  notification: WelcomeNotification\n): Promise<EmailResult> {\n  const startTime = Date.now()\n  \n  try {\n    logger.info('Sending welcome notification', {\n      clientEmail: notification.clientEmail\n    })\n\n    const emailData = {\n      to: [{ email: notification.clientEmail, name: notification.clientName }],\n      subject: `🎉 Welcome to BooksFlowAI - Your Bookkeeping Just Got Easier`,\n      htmlContent: generateWelcomeHTML(notification),\n      textContent: generateWelcomeText(notification)\n    }\n\n    const result = await emailCircuitBreaker.execute(() =>\n      withRetry(\n        () => sendEmailViaProvider(emailData),\n        EMAIL_CONFIG.RETRY_ATTEMPTS,\n        EMAIL_CONFIG.RETRY_DELAY,\n        { clientEmail: notification.clientEmail }\n      )\n    )\n\n    const processingTime = Date.now() - startTime\n\n    logger.info('Welcome notification sent successfully', {\n      clientEmail: notification.clientEmail,\n      messageId: result.messageId,\n      processingTime\n    })\n\n    return {\n      success: true,\n      messageId: result.messageId,\n      timestamp: new Date().toISOString()\n    }\n\n  } catch (error) {\n    const processingTime = Date.now() - startTime\n    \n    logger.error('Failed to send welcome notification', error as Error, {\n      clientEmail: notification.clientEmail,\n      processingTime\n    })\n\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error',\n      timestamp: new Date().toISOString()\n    }\n  }\n}\n\n/**\n * Send email via configured provider (SendGrid)\n */\nasync function sendEmailViaProvider(emailData: {\n  to: EmailRecipient[]\n  subject: string\n  htmlContent: string\n  textContent: string\n}): Promise<{ messageId: string }> {\n  const payload = {\n    personalizations: [\n      {\n        to: emailData.to,\n        subject: emailData.subject\n      }\n    ],\n    from: {\n      email: EMAIL_CONFIG.FROM_EMAIL,\n      name: EMAIL_CONFIG.FROM_NAME\n    },\n    content: [\n      {\n        type: 'text/plain',\n        value: emailData.textContent\n      },\n      {\n        type: 'text/html',\n        value: emailData.htmlContent\n      }\n    ]\n  }\n\n  const response = await fetch('https://api.sendgrid.com/v3/mail/send', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${EMAIL_CONFIG.SENDGRID_API_KEY}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(payload),\n    signal: AbortSignal.timeout(EMAIL_CONFIG.TIMEOUT)\n  })\n\n  if (!response.ok) {\n    const errorText = await response.text()\n    throw new ExternalServiceError(\n      'SendGrid',\n      `Email send failed (${response.status}): ${errorText}`,\n      { payload }\n    )\n  }\n\n  // SendGrid returns 202 with X-Message-Id header\n  const messageId = response.headers.get('X-Message-Id') || `msg_${Date.now()}`\n  \n  return { messageId }\n}\n\n/**\n * Generate HTML content for missing receipt reminder\n */\nfunction generateMissingReceiptHTML(notification: MissingReceiptNotification): string {\n  const receiptRows = notification.missingReceipts.map(receipt => `\n    <tr>\n      <td style=\"padding: 12px; border-bottom: 1px solid #e5e7eb;\">${receipt.description}</td>\n      <td style=\"padding: 12px; border-bottom: 1px solid #e5e7eb; text-align: right;\">$${receipt.amount.toFixed(2)}</td>\n      <td style=\"padding: 12px; border-bottom: 1px solid #e5e7eb; text-align: center;\">${new Date(receipt.date).toLocaleDateString()}</td>\n      <td style=\"padding: 12px; border-bottom: 1px solid #e5e7eb; text-align: center; color: #dc2626;\">${receipt.daysOverdue} days</td>\n    </tr>\n  `).join('')\n\n  return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Missing Receipts Reminder</title>\n    </head>\n    <body style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #374151; background-color: #f9fafb; margin: 0; padding: 20px;\">\n      <div style=\"max-width: 600px; margin: 0 auto; background-color: white; border-radius: 8px; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1); overflow: hidden;\">\n        <!-- Header -->\n        <div style=\"background-color: #3b82f6; color: white; padding: 24px; text-align: center;\">\n          <h1 style=\"margin: 0; font-size: 24px; font-weight: bold;\">📄 Missing Receipts Reminder</h1>\n          <p style=\"margin: 8px 0 0 0; opacity: 0.9;\">BooksFlowAI</p>\n        </div>\n        \n        <!-- Content -->\n        <div style=\"padding: 24px;\">\n          <p style=\"margin: 0 0 16px 0; font-size: 16px;\">Hi ${notification.clientName},</p>\n          \n          <p style=\"margin: 0 0 24px 0;\">Your accountant <strong>${notification.accountantName}</strong> is waiting for ${notification.missingReceipts.length} receipt${notification.missingReceipts.length > 1 ? 's' : ''} to complete your bookkeeping.</p>\n          \n          <div style=\"background-color: #fef3c7; border: 1px solid #f59e0b; border-radius: 6px; padding: 16px; margin: 24px 0;\">\n            <h3 style=\"margin: 0 0 12px 0; color: #92400e; font-size: 16px;\">⚠️ Missing Receipts (${notification.missingReceipts.length})</h3>\n            <p style=\"margin: 0; color: #92400e; font-size: 14px;\">Total amount: <strong>$${notification.totalAmount.toFixed(2)}</strong></p>\n          </div>\n          \n          <table style=\"width: 100%; border-collapse: collapse; margin: 24px 0; border: 1px solid #e5e7eb; border-radius: 6px; overflow: hidden;\">\n            <thead>\n              <tr style=\"background-color: #f9fafb;\">\n                <th style=\"padding: 12px; text-align: left; font-weight: 600; border-bottom: 1px solid #e5e7eb;\">Transaction</th>\n                <th style=\"padding: 12px; text-align: right; font-weight: 600; border-bottom: 1px solid #e5e7eb;\">Amount</th>\n                <th style=\"padding: 12px; text-align: center; font-weight: 600; border-bottom: 1px solid #e5e7eb;\">Date</th>\n                <th style=\"padding: 12px; text-align: center; font-weight: 600; border-bottom: 1px solid #e5e7eb;\">Overdue</th>\n              </tr>\n            </thead>\n            <tbody>\n              ${receiptRows}\n            </tbody>\n          </table>\n          \n          <div style=\"text-align: center; margin: 32px 0;\">\n            <a href=\"${notification.portalUrl}\" style=\"display: inline-block; background-color: #3b82f6; color: white; text-decoration: none; padding: 12px 24px; border-radius: 6px; font-weight: 600;\">Upload Receipts Now</a>\n          </div>\n          \n          <div style=\"background-color: #f0f9ff; border: 1px solid #0ea5e9; border-radius: 6px; padding: 16px; margin: 24px 0;\">\n            <h4 style=\"margin: 0 0 8px 0; color: #0c4a6e; font-size: 14px;\">💡 Quick Tips:</h4>\n            <ul style=\"margin: 0; padding-left: 20px; color: #0c4a6e; font-size: 14px;\">\n              <li>Take clear photos with good lighting</li>\n              <li>Include the entire receipt</li>\n              <li>PDF scans work best for OCR accuracy</li>\n            </ul>\n          </div>\n          \n          <p style=\"margin: 24px 0 0 0; font-size: 14px; color: #6b7280;\">Need help? Reply to this email or contact ${notification.accountantName} directly.</p>\n        </div>\n        \n        <!-- Footer -->\n        <div style=\"background-color: #f9fafb; padding: 16px; text-align: center; border-top: 1px solid #e5e7eb;\">\n          <p style=\"margin: 0; font-size: 12px; color: #6b7280;\">This is an automated reminder from BooksFlowAI</p>\n        </div>\n      </div>\n    </body>\n    </html>\n  `\n}\n\n/**\n * Generate text content for missing receipt reminder\n */\nfunction generateMissingReceiptText(notification: MissingReceiptNotification): string {\n  const receiptList = notification.missingReceipts.map(receipt => \n    `- ${receipt.description}: $${receipt.amount.toFixed(2)} (${new Date(receipt.date).toLocaleDateString()}) - ${receipt.daysOverdue} days overdue`\n  ).join('\n')\n\n  return `\nMissing Receipts Reminder\n\nHi ${notification.clientName},\n\nYour accountant ${notification.accountantName} is waiting for ${notification.missingReceipts.length} receipt${notification.missingReceipts.length > 1 ? 's' : ''} to complete your bookkeeping.\n\nMissing Receipts (Total: $${notification.totalAmount.toFixed(2)}):\n${receiptList}\n\nPlease upload these receipts as soon as possible:\n${notification.portalUrl}\n\nQuick Tips:\n- Take clear photos with good lighting\n- Include the entire receipt\n- PDF scans work best for OCR accuracy\n\nNeed help? Reply to this email or contact ${notification.accountantName} directly.\n\nBest regards,\nBooksFlowAI Team\n  `\n}\n\n/**\n * Generate HTML content for report ready notification\n */\nfunction generateReportReadyHTML(notification: ReportReadyNotification): string {\n  return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Report Ready</title>\n    </head>\n    <body style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #374151; background-color: #f9fafb; margin: 0; padding: 20px;\">\n      <div style=\"max-width: 600px; margin: 0 auto; background-color: white; border-radius: 8px; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1); overflow: hidden;\">\n        <!-- Header -->\n        <div style=\"background-color: #10b981; color: white; padding: 24px; text-align: center;\">\n          <h1 style=\"margin: 0; font-size: 24px; font-weight: bold;\">📊 Your Report is Ready!</h1>\n          <p style=\"margin: 8px 0 0 0; opacity: 0.9;\">BooksFlowAI</p>\n        </div>\n        \n        <!-- Content -->\n        <div style=\"padding: 24px;\">\n          <p style=\"margin: 0 0 16px 0; font-size: 16px;\">Hi ${notification.clientName},</p>\n          \n          <p style=\"margin: 0 0 24px 0;\">Great news! ${notification.accountantName} has completed your <strong>${notification.reportTitle}</strong> for ${notification.reportPeriod}.</p>\n          \n          <div style=\"background-color: #d1fae5; border: 1px solid #10b981; border-radius: 6px; padding: 20px; margin: 24px 0; text-align: center;\">\n            <h3 style=\"margin: 0 0 12px 0; color: #065f46; font-size: 18px;\">✅ ${notification.reportTitle}</h3>\n            <p style=\"margin: 0 0 16px 0; color: #065f46; font-size: 14px;\">${notification.reportPeriod}</p>\n            <a href=\"${notification.downloadUrl}\" style=\"display: inline-block; background-color: #10b981; color: white; text-decoration: none; padding: 12px 24px; border-radius: 6px; font-weight: 600;\">Download Report (PDF)</a>\n          </div>\n          \n          <div style=\"background-color: #f0f9ff; border: 1px solid #0ea5e9; border-radius: 6px; padding: 16px; margin: 24px 0;\">\n            <h4 style=\"margin: 0 0 8px 0; color: #0c4a6e; font-size: 14px;\">📋 What's Included:</h4>\n            <ul style=\"margin: 0; padding-left: 20px; color: #0c4a6e; font-size: 14px;\">\n              <li>Income and expense summary</li>\n              <li>Transaction categorization</li>\n              <li>Receipt matching status</li>\n              <li>AI-powered insights and recommendations</li>\n            </ul>\n          </div>\n          \n          <p style=\"margin: 24px 0 0 0; font-size: 14px; color: #6b7280;\">Questions about your report? Contact ${notification.accountantName} or reply to this email.</p>\n        </div>\n        \n        <!-- Footer -->\n        <div style=\"background-color: #f9fafb; padding: 16px; text-align: center; border-top: 1px solid #e5e7eb;\">\n          <p style=\"margin: 0; font-size: 12px; color: #6b7280;\">This notification was sent from BooksFlowAI</p>\n        </div>\n      </div>\n    </body>\n    </html>\n  `\n}\n\n/**\n * Generate text content for report ready notification\n */\nfunction generateReportReadyText(notification: ReportReadyNotification): string {\n  return `\nYour Report is Ready!\n\nHi ${notification.clientName},\n\nGreat news! ${notification.accountantName} has completed your ${notification.reportTitle} for ${notification.reportPeriod}.\n\nDownload your report here:\n${notification.downloadUrl}\n\nWhat's Included:\n- Income and expense summary\n- Transaction categorization\n- Receipt matching status\n- AI-powered insights and recommendations\n\nQuestions about your report? Contact ${notification.accountantName} or reply to this email.\n\nBest regards,\nBooksFlowAI Team\n  `\n}\n\n/**\n * Generate HTML content for welcome notification\n */\nfunction generateWelcomeHTML(notification: WelcomeNotification): string {\n  const instructionsList = notification.setupInstructions.map(instruction => \n    `<li style=\"margin: 8px 0;\">${instruction}</li>`\n  ).join('')\n\n  return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Welcome to BooksFlowAI</title>\n    </head>\n    <body style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #374151; background-color: #f9fafb; margin: 0; padding: 20px;\">\n      <div style=\"max-width: 600px; margin: 0 auto; background-color: white; border-radius: 8px; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1); overflow: hidden;\">\n        <!-- Header -->\n        <div style=\"background-color: #8b5cf6; color: white; padding: 24px; text-align: center;\">\n          <h1 style=\"margin: 0; font-size: 24px; font-weight: bold;\">🎉 Welcome to BooksFlowAI!</h1>\n          <p style=\"margin: 8px 0 0 0; opacity: 0.9;\">Your Bookkeeping Just Got Easier</p>\n        </div>\n        \n        <!-- Content -->\n        <div style=\"padding: 24px;\">\n          <p style=\"margin: 0 0 16px 0; font-size: 16px;\">Hi ${notification.clientName},</p>\n          \n          <p style=\"margin: 0 0 24px 0;\">Welcome to BooksFlowAI! Your accountant <strong>${notification.accountantName}</strong> has set up your account and you're ready to streamline your bookkeeping with AI-powered automation.</p>\n          \n          <div style=\"background-color: #f0f9ff; border: 1px solid #0ea5e9; border-radius: 6px; padding: 20px; margin: 24px 0;\">\n            <h3 style=\"margin: 0 0 16px 0; color: #0c4a6e; font-size: 18px;\">🚀 Getting Started</h3>\n            <ol style=\"margin: 0; padding-left: 20px; color: #0c4a6e;\">\n              ${instructionsList}\n            </ol>\n          </div>\n          \n          <div style=\"text-align: center; margin: 32px 0;\">\n            <a href=\"${notification.portalUrl}\" style=\"display: inline-block; background-color: #8b5cf6; color: white; text-decoration: none; padding: 12px 24px; border-radius: 6px; font-weight: 600;\">Access Your Portal</a>\n          </div>\n          \n          <div style=\"background-color: #fef3c7; border: 1px solid #f59e0b; border-radius: 6px; padding: 16px; margin: 24px 0;\">\n            <h4 style=\"margin: 0 0 8px 0; color: #92400e; font-size: 14px;\">✨ What Makes BooksFlowAI Special:</h4>\n            <ul style=\"margin: 0; padding-left: 20px; color: #92400e; font-size: 14px;\">\n              <li>AI-powered receipt processing and categorization</li>\n              <li>Automatic transaction matching</li>\n              <li>Real-time collaboration with your accountant</li>\n              <li>Intelligent insights and recommendations</li>\n            </ul>\n          </div>\n          \n          <p style=\"margin: 24px 0 0 0; font-size: 14px; color: #6b7280;\">Need help getting started? Contact ${notification.accountantName} or reply to this email.</p>\n        </div>\n        \n        <!-- Footer -->\n        <div style=\"background-color: #f9fafb; padding: 16px; text-align: center; border-top: 1px solid #e5e7eb;\">\n          <p style=\"margin: 0; font-size: 12px; color: #6b7280;\">Welcome to the future of bookkeeping with BooksFlowAI</p>\n        </div>\n      </div>\n    </body>\n    </html>\n  `\n}\n\n/**\n * Generate text content for welcome notification\n */\nfunction generateWelcomeText(notification: WelcomeNotification): string {\n  const instructionsList = notification.setupInstructions.map((instruction, index) => \n    `${index + 1}. ${instruction}`\n  ).join('\n')\n\n  return `\nWelcome to BooksFlowAI!\n\nHi ${notification.clientName},\n\nWelcome to BooksFlowAI! Your accountant ${notification.accountantName} has set up your account and you're ready to streamline your bookkeeping with AI-powered automation.\n\nGetting Started:\n${instructionsList}\n\nAccess your portal here:\n${notification.portalUrl}\n\nWhat Makes BooksFlowAI Special:\n- AI-powered receipt processing and categorization\n- Automatic transaction matching\n- Real-time collaboration with your accountant\n- Intelligent insights and recommendations\n\nNeed help getting started? Contact ${notification.accountantName} or reply to this email.\n\nWelcome to the future of bookkeeping!\nBooksFlowAI Team\n  `\n}\n\n/**\n * Get email sending statistics\n */\nexport async function getEmailStatistics(accountantId?: string): Promise<{\n  totalSent: number\n  successRate: number\n  recentActivity: Array<{\n    type: string\n    recipient: string\n    status: 'sent' | 'failed'\n    timestamp: string\n  }>\n}> {\n  try {\n    // In a real implementation, this would query email logs from database\n    // For now, return mock data\n    return {\n      totalSent: 0,\n      successRate: 0,\n      recentActivity: []\n    }\n  } catch (error) {\n    logger.error('Error getting email statistics', error as Error, { accountantId })\n    throw new Error(`Failed to get email statistics: ${error instanceof Error ? error.message : 'Unknown error'}`)\n  }\n}\n"