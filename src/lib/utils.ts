/**\n * Utility functions for BooksFlowAI\n * Common formatting, validation, and helper functions\n */\n\nimport { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\n/**\n * Merge Tailwind CSS classes with proper precedence\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n/**\n * Format currency values\n */\nexport function formatCurrency(\n  amount: number,\n  currency: string = 'USD',\n  locale: string = 'en-US'\n): string {\n  return new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(amount)\n}\n\n/**\n * Format date values\n */\nexport function formatDate(\n  date: string | Date,\n  options: Intl.DateTimeFormatOptions = {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  },\n  locale: string = 'en-US'\n): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date\n  return new Intl.DateTimeFormat(locale, options).format(dateObj)\n}\n\n/**\n * Format relative time (e.g., \"2 hours ago\")\n */\nexport function formatRelativeTime(\n  date: string | Date,\n  locale: string = 'en-US'\n): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date\n  const now = new Date()\n  const diffInSeconds = Math.floor((now.getTime() - dateObj.getTime()) / 1000)\n\n  const rtf = new Intl.RelativeTimeFormat(locale, { numeric: 'auto' })\n\n  if (diffInSeconds < 60) {\n    return rtf.format(-diffInSeconds, 'second')\n  } else if (diffInSeconds < 3600) {\n    return rtf.format(-Math.floor(diffInSeconds / 60), 'minute')\n  } else if (diffInSeconds < 86400) {\n    return rtf.format(-Math.floor(diffInSeconds / 3600), 'hour')\n  } else if (diffInSeconds < 2592000) {\n    return rtf.format(-Math.floor(diffInSeconds / 86400), 'day')\n  } else if (diffInSeconds < 31536000) {\n    return rtf.format(-Math.floor(diffInSeconds / 2592000), 'month')\n  } else {\n    return rtf.format(-Math.floor(diffInSeconds / 31536000), 'year')\n  }\n}\n\n/**\n * Format percentage values\n */\nexport function formatPercentage(\n  value: number,\n  decimals: number = 1,\n  locale: string = 'en-US'\n): string {\n  return new Intl.NumberFormat(locale, {\n    style: 'percent',\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals\n  }).format(value / 100)\n}\n\n/**\n * Format large numbers with abbreviations (K, M, B)\n */\nexport function formatCompactNumber(\n  value: number,\n  locale: string = 'en-US'\n): string {\n  return new Intl.NumberFormat(locale, {\n    notation: 'compact',\n    compactDisplay: 'short'\n  }).format(value)\n}\n\n/**\n * Validate email address\n */\nexport function isValidEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  return emailRegex.test(email)\n}\n\n/**\n * Validate phone number (basic US format)\n */\nexport function isValidPhone(phone: string): boolean {\n  const phoneRegex = /^[\\+]?[1]?[\\s\\-\\.]?[\\(]?[0-9]{3}[\\)]?[\\s\\-\\.]?[0-9]{3}[\\s\\-\\.]?[0-9]{4}$/\n  return phoneRegex.test(phone.replace(/\\s/g, ''))\n}\n\n/**\n * Generate a random ID\n */\nexport function generateId(length: number = 8): string {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  let result = ''\n  for (let i = 0; i < length; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length))\n  }\n  return result\n}\n\n/**\n * Debounce function\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout)\n    timeout = setTimeout(() => func(...args), wait)\n  }\n}\n\n/**\n * Throttle function\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean\n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args)\n      inThrottle = true\n      setTimeout(() => (inThrottle = false), limit)\n    }\n  }\n}\n\n/**\n * Deep clone an object\n */\nexport function deepClone<T>(obj: T): T {\n  if (obj === null || typeof obj !== 'object') {\n    return obj\n  }\n  \n  if (obj instanceof Date) {\n    return new Date(obj.getTime()) as unknown as T\n  }\n  \n  if (obj instanceof Array) {\n    return obj.map(item => deepClone(item)) as unknown as T\n  }\n  \n  if (typeof obj === 'object') {\n    const clonedObj = {} as { [key: string]: any }\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        clonedObj[key] = deepClone(obj[key])\n      }\n    }\n    return clonedObj as T\n  }\n  \n  return obj\n}\n\n/**\n * Capitalize first letter of a string\n */\nexport function capitalize(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase()\n}\n\n/**\n * Convert string to title case\n */\nexport function toTitleCase(str: string): string {\n  return str.replace(\n    /\\w\\S*/g,\n    (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n  )\n}\n\n/**\n * Truncate text with ellipsis\n */\nexport function truncate(text: string, length: number): string {\n  if (text.length <= length) return text\n  return text.slice(0, length) + '...'\n}\n\n/**\n * Sleep/delay function\n */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n\n/**\n * Check if value is empty (null, undefined, empty string, empty array, empty object)\n */\nexport function isEmpty(value: any): boolean {\n  if (value == null) return true\n  if (typeof value === 'string') return value.trim().length === 0\n  if (Array.isArray(value)) return value.length === 0\n  if (typeof value === 'object') return Object.keys(value).length === 0\n  return false\n}\n\n/**\n * Get file extension from filename\n */\nexport function getFileExtension(filename: string): string {\n  return filename.slice((filename.lastIndexOf('.') - 1 >>> 0) + 2)\n}\n\n/**\n * Format file size in human readable format\n */\nexport function formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes'\n  \n  const k = 1024\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB']\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]\n}\n\n/**\n * Convert camelCase to kebab-case\n */\nexport function camelToKebab(str: string): string {\n  return str.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, '$1-$2').toLowerCase()\n}\n\n/**\n * Convert kebab-case to camelCase\n */\nexport function kebabToCamel(str: string): string {\n  return str.replace(/-([a-z])/g, (g) => g[1].toUpperCase())\n}\n\n/**\n * Parse query string to object\n */\nexport function parseQueryString(queryString: string): Record<string, string> {\n  const params = new URLSearchParams(queryString)\n  const result: Record<string, string> = {}\n  \n  for (const [key, value] of params) {\n    result[key] = value\n  }\n  \n  return result\n}\n\n/**\n * Build query string from object\n */\nexport function buildQueryString(params: Record<string, any>): string {\n  const searchParams = new URLSearchParams()\n  \n  for (const [key, value] of Object.entries(params)) {\n    if (value != null) {\n      searchParams.append(key, String(value))\n    }\n  }\n  \n  return searchParams.toString()\n}\n\n/**\n * Validate and sanitize HTML\n */\nexport function sanitizeHtml(html: string): string {\n  // Basic HTML sanitization - in production, use a proper library like DOMPurify\n  return html\n    .replace(/<script[^>]*>.*?<\\/script>/gi, '')\n    .replace(/<iframe[^>]*>.*?<\\/iframe>/gi, '')\n    .replace(/javascript:/gi, '')\n    .replace(/on\\w+\\s*=/gi, '')\n}\n\n/**\n * Calculate confidence level from score\n */\nexport function getConfidenceLevel(score: number): 'high' | 'medium' | 'low' {\n  if (score >= 0.9) return 'high'\n  if (score >= 0.7) return 'medium'\n  return 'low'\n}\n\n/**\n * Format confidence score as percentage\n */\nexport function formatConfidenceScore(score: number): string {\n  return `${Math.round(score * 100)}%`\n}\n\n/**\n * Get color class for confidence level\n */\nexport function getConfidenceColor(confidence: 'high' | 'medium' | 'low'): string {\n  switch (confidence) {\n    case 'high':\n      return 'text-success-600 bg-success-100'\n    case 'medium':\n      return 'text-warning-600 bg-warning-100'\n    case 'low':\n      return 'text-error-600 bg-error-100'\n    default:\n      return 'text-gray-600 bg-gray-100'\n  }\n}\n\n/**\n * Sort array of objects by multiple fields\n */\nexport function sortBy<T>(\n  array: T[],\n  ...sortKeys: Array<keyof T | ((item: T) => any)>\n): T[] {\n  return array.sort((a, b) => {\n    for (const key of sortKeys) {\n      const aVal = typeof key === 'function' ? key(a) : a[key]\n      const bVal = typeof key === 'function' ? key(b) : b[key]\n      \n      if (aVal < bVal) return -1\n      if (aVal > bVal) return 1\n    }\n    return 0\n  })\n}\n\n/**\n * Group array of objects by a key\n */\nexport function groupBy<T, K extends keyof T>(\n  array: T[],\n  key: K\n): Record<string, T[]> {\n  return array.reduce((groups, item) => {\n    const group = String(item[key])\n    groups[group] = groups[group] || []\n    groups[group].push(item)\n    return groups\n  }, {} as Record<string, T[]>)\n}\n\n/**\n * Remove duplicates from array\n */\nexport function unique<T>(array: T[]): T[] {\n  return [...new Set(array)]\n}\n\n/**\n * Remove duplicates from array of objects by key\n */\nexport function uniqueBy<T, K extends keyof T>(array: T[], key: K): T[] {\n  const seen = new Set()\n  return array.filter(item => {\n    const value = item[key]\n    if (seen.has(value)) {\n      return false\n    }\n    seen.add(value)\n    return true\n  })\n}\n"